/* automatically generated by rust-bindgen 0.55.1 */

pub const AL_INVALID: i32 = -1;
pub const AL_NONE: u32 = 0;
pub const AL_FALSE: u32 = 0;
pub const AL_TRUE: u32 = 1;
pub const AL_SOURCE_RELATIVE: u32 = 514;
pub const AL_CONE_INNER_ANGLE: u32 = 4097;
pub const AL_CONE_OUTER_ANGLE: u32 = 4098;
pub const AL_PITCH: u32 = 4099;
pub const AL_POSITION: u32 = 4100;
pub const AL_DIRECTION: u32 = 4101;
pub const AL_VELOCITY: u32 = 4102;
pub const AL_LOOPING: u32 = 4103;
pub const AL_BUFFER: u32 = 4105;
pub const AL_GAIN: u32 = 4106;
pub const AL_MIN_GAIN: u32 = 4109;
pub const AL_MAX_GAIN: u32 = 4110;
pub const AL_ORIENTATION: u32 = 4111;
pub const AL_SOURCE_STATE: u32 = 4112;
pub const AL_INITIAL: u32 = 4113;
pub const AL_PLAYING: u32 = 4114;
pub const AL_PAUSED: u32 = 4115;
pub const AL_STOPPED: u32 = 4116;
pub const AL_BUFFERS_QUEUED: u32 = 4117;
pub const AL_BUFFERS_PROCESSED: u32 = 4118;
pub const AL_REFERENCE_DISTANCE: u32 = 4128;
pub const AL_ROLLOFF_FACTOR: u32 = 4129;
pub const AL_CONE_OUTER_GAIN: u32 = 4130;
pub const AL_MAX_DISTANCE: u32 = 4131;
pub const AL_SEC_OFFSET: u32 = 4132;
pub const AL_SAMPLE_OFFSET: u32 = 4133;
pub const AL_BYTE_OFFSET: u32 = 4134;
pub const AL_SOURCE_TYPE: u32 = 4135;
pub const AL_STATIC: u32 = 4136;
pub const AL_STREAMING: u32 = 4137;
pub const AL_UNDETERMINED: u32 = 4144;
pub const AL_FORMAT_MONO8: u32 = 4352;
pub const AL_FORMAT_MONO16: u32 = 4353;
pub const AL_FORMAT_STEREO8: u32 = 4354;
pub const AL_FORMAT_STEREO16: u32 = 4355;
pub const AL_FREQUENCY: u32 = 8193;
pub const AL_BITS: u32 = 8194;
pub const AL_CHANNELS: u32 = 8195;
pub const AL_SIZE: u32 = 8196;
pub const AL_UNUSED: u32 = 8208;
pub const AL_PENDING: u32 = 8209;
pub const AL_PROCESSED: u32 = 8210;
pub const AL_NO_ERROR: u32 = 0;
pub const AL_INVALID_NAME: u32 = 40961;
pub const AL_INVALID_ENUM: u32 = 40962;
pub const AL_INVALID_VALUE: u32 = 40963;
pub const AL_INVALID_OPERATION: u32 = 40964;
pub const AL_OUT_OF_MEMORY: u32 = 40965;
pub const AL_VENDOR: u32 = 45057;
pub const AL_VERSION: u32 = 45058;
pub const AL_RENDERER: u32 = 45059;
pub const AL_EXTENSIONS: u32 = 45060;
pub const AL_DOPPLER_FACTOR: u32 = 49152;
pub const AL_DOPPLER_VELOCITY: u32 = 49153;
pub const AL_SPEED_OF_SOUND: u32 = 49155;
pub const AL_DISTANCE_MODEL: u32 = 53248;
pub const AL_INVERSE_DISTANCE: u32 = 53249;
pub const AL_INVERSE_DISTANCE_CLAMPED: u32 = 53250;
pub const AL_LINEAR_DISTANCE: u32 = 53251;
pub const AL_LINEAR_DISTANCE_CLAMPED: u32 = 53252;
pub const AL_EXPONENT_DISTANCE: u32 = 53253;
pub const AL_EXPONENT_DISTANCE_CLAMPED: u32 = 53254;
pub const ALC_INVALID: u32 = 0;
pub const ALC_VERSION_0_1: u32 = 1;
pub const ALC_FALSE: u32 = 0;
pub const ALC_TRUE: u32 = 1;
pub const ALC_FREQUENCY: u32 = 4103;
pub const ALC_REFRESH: u32 = 4104;
pub const ALC_SYNC: u32 = 4105;
pub const ALC_MONO_SOURCES: u32 = 4112;
pub const ALC_STEREO_SOURCES: u32 = 4113;
pub const ALC_NO_ERROR: u32 = 0;
pub const ALC_INVALID_DEVICE: u32 = 40961;
pub const ALC_INVALID_CONTEXT: u32 = 40962;
pub const ALC_INVALID_ENUM: u32 = 40963;
pub const ALC_INVALID_VALUE: u32 = 40964;
pub const ALC_OUT_OF_MEMORY: u32 = 40965;
pub const ALC_MAJOR_VERSION: u32 = 4096;
pub const ALC_MINOR_VERSION: u32 = 4097;
pub const ALC_ATTRIBUTES_SIZE: u32 = 4098;
pub const ALC_ALL_ATTRIBUTES: u32 = 4099;
pub const ALC_DEFAULT_DEVICE_SPECIFIER: u32 = 4100;
pub const ALC_DEVICE_SPECIFIER: u32 = 4101;
pub const ALC_EXTENSIONS: u32 = 4102;
pub const ALC_EXT_CAPTURE: u32 = 1;
pub const ALC_CAPTURE_DEVICE_SPECIFIER: u32 = 784;
pub const ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER: u32 = 785;
pub const ALC_CAPTURE_SAMPLES: u32 = 786;
pub const ALC_ENUMERATE_ALL_EXT: u32 = 1;
pub const ALC_DEFAULT_ALL_DEVICES_SPECIFIER: u32 = 4114;
pub const ALC_ALL_DEVICES_SPECIFIER: u32 = 4115;
pub const AL_LOKI_IMA_ADPCM_format: u32 = 1;
pub const AL_FORMAT_IMA_ADPCM_MONO16_EXT: u32 = 65536;
pub const AL_FORMAT_IMA_ADPCM_STEREO16_EXT: u32 = 65537;
pub const AL_LOKI_WAVE_format: u32 = 1;
pub const AL_FORMAT_WAVE_EXT: u32 = 65538;
pub const AL_EXT_vorbis: u32 = 1;
pub const AL_FORMAT_VORBIS_EXT: u32 = 65539;
pub const AL_LOKI_quadriphonic: u32 = 1;
pub const AL_FORMAT_QUAD8_LOKI: u32 = 65540;
pub const AL_FORMAT_QUAD16_LOKI: u32 = 65541;
pub const AL_EXT_float32: u32 = 1;
pub const AL_FORMAT_MONO_FLOAT32: u32 = 65552;
pub const AL_FORMAT_STEREO_FLOAT32: u32 = 65553;
pub const AL_EXT_double: u32 = 1;
pub const AL_FORMAT_MONO_DOUBLE_EXT: u32 = 65554;
pub const AL_FORMAT_STEREO_DOUBLE_EXT: u32 = 65555;
pub const AL_EXT_MULAW: u32 = 1;
pub const AL_FORMAT_MONO_MULAW_EXT: u32 = 65556;
pub const AL_FORMAT_STEREO_MULAW_EXT: u32 = 65557;
pub const AL_EXT_ALAW: u32 = 1;
pub const AL_FORMAT_MONO_ALAW_EXT: u32 = 65558;
pub const AL_FORMAT_STEREO_ALAW_EXT: u32 = 65559;
pub const ALC_LOKI_audio_channel: u32 = 1;
pub const ALC_CHAN_MAIN_LOKI: u32 = 5242881;
pub const ALC_CHAN_PCM_LOKI: u32 = 5242882;
pub const ALC_CHAN_CD_LOKI: u32 = 5242883;
pub const AL_EXT_MCFORMATS: u32 = 1;
pub const AL_FORMAT_QUAD8: u32 = 4612;
pub const AL_FORMAT_QUAD16: u32 = 4613;
pub const AL_FORMAT_QUAD32: u32 = 4614;
pub const AL_FORMAT_REAR8: u32 = 4615;
pub const AL_FORMAT_REAR16: u32 = 4616;
pub const AL_FORMAT_REAR32: u32 = 4617;
pub const AL_FORMAT_51CHN8: u32 = 4618;
pub const AL_FORMAT_51CHN16: u32 = 4619;
pub const AL_FORMAT_51CHN32: u32 = 4620;
pub const AL_FORMAT_61CHN8: u32 = 4621;
pub const AL_FORMAT_61CHN16: u32 = 4622;
pub const AL_FORMAT_61CHN32: u32 = 4623;
pub const AL_FORMAT_71CHN8: u32 = 4624;
pub const AL_FORMAT_71CHN16: u32 = 4625;
pub const AL_FORMAT_71CHN32: u32 = 4626;
pub const AL_EXT_MULAW_MCFORMATS: u32 = 1;
pub const AL_FORMAT_MONO_MULAW: u32 = 65556;
pub const AL_FORMAT_STEREO_MULAW: u32 = 65557;
pub const AL_FORMAT_QUAD_MULAW: u32 = 65569;
pub const AL_FORMAT_REAR_MULAW: u32 = 65570;
pub const AL_FORMAT_51CHN_MULAW: u32 = 65571;
pub const AL_FORMAT_61CHN_MULAW: u32 = 65572;
pub const AL_FORMAT_71CHN_MULAW: u32 = 65573;
pub const AL_EXT_IMA4: u32 = 1;
pub const AL_FORMAT_MONO_IMA4: u32 = 4864;
pub const AL_FORMAT_STEREO_IMA4: u32 = 4865;
pub const AL_EXT_STATIC_BUFFER: u32 = 1;
pub const ALC_EXT_EFX: u32 = 1;
pub const ALC_EXT_EFX_NAME: &'static [u8; 12usize] = b"ALC_EXT_EFX\0";
pub const ALC_EFX_MAJOR_VERSION: u32 = 131073;
pub const ALC_EFX_MINOR_VERSION: u32 = 131074;
pub const ALC_MAX_AUXILIARY_SENDS: u32 = 131075;
pub const AL_METERS_PER_UNIT: u32 = 131076;
pub const AL_DIRECT_FILTER: u32 = 131077;
pub const AL_AUXILIARY_SEND_FILTER: u32 = 131078;
pub const AL_AIR_ABSORPTION_FACTOR: u32 = 131079;
pub const AL_ROOM_ROLLOFF_FACTOR: u32 = 131080;
pub const AL_CONE_OUTER_GAINHF: u32 = 131081;
pub const AL_DIRECT_FILTER_GAINHF_AUTO: u32 = 131082;
pub const AL_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 131083;
pub const AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 131084;
pub const AL_REVERB_DENSITY: u32 = 1;
pub const AL_REVERB_DIFFUSION: u32 = 2;
pub const AL_REVERB_GAIN: u32 = 3;
pub const AL_REVERB_GAINHF: u32 = 4;
pub const AL_REVERB_DECAY_TIME: u32 = 5;
pub const AL_REVERB_DECAY_HFRATIO: u32 = 6;
pub const AL_REVERB_REFLECTIONS_GAIN: u32 = 7;
pub const AL_REVERB_REFLECTIONS_DELAY: u32 = 8;
pub const AL_REVERB_LATE_REVERB_GAIN: u32 = 9;
pub const AL_REVERB_LATE_REVERB_DELAY: u32 = 10;
pub const AL_REVERB_AIR_ABSORPTION_GAINHF: u32 = 11;
pub const AL_REVERB_ROOM_ROLLOFF_FACTOR: u32 = 12;
pub const AL_REVERB_DECAY_HFLIMIT: u32 = 13;
pub const AL_EAXREVERB_DENSITY: u32 = 1;
pub const AL_EAXREVERB_DIFFUSION: u32 = 2;
pub const AL_EAXREVERB_GAIN: u32 = 3;
pub const AL_EAXREVERB_GAINHF: u32 = 4;
pub const AL_EAXREVERB_GAINLF: u32 = 5;
pub const AL_EAXREVERB_DECAY_TIME: u32 = 6;
pub const AL_EAXREVERB_DECAY_HFRATIO: u32 = 7;
pub const AL_EAXREVERB_DECAY_LFRATIO: u32 = 8;
pub const AL_EAXREVERB_REFLECTIONS_GAIN: u32 = 9;
pub const AL_EAXREVERB_REFLECTIONS_DELAY: u32 = 10;
pub const AL_EAXREVERB_REFLECTIONS_PAN: u32 = 11;
pub const AL_EAXREVERB_LATE_REVERB_GAIN: u32 = 12;
pub const AL_EAXREVERB_LATE_REVERB_DELAY: u32 = 13;
pub const AL_EAXREVERB_LATE_REVERB_PAN: u32 = 14;
pub const AL_EAXREVERB_ECHO_TIME: u32 = 15;
pub const AL_EAXREVERB_ECHO_DEPTH: u32 = 16;
pub const AL_EAXREVERB_MODULATION_TIME: u32 = 17;
pub const AL_EAXREVERB_MODULATION_DEPTH: u32 = 18;
pub const AL_EAXREVERB_AIR_ABSORPTION_GAINHF: u32 = 19;
pub const AL_EAXREVERB_HFREFERENCE: u32 = 20;
pub const AL_EAXREVERB_LFREFERENCE: u32 = 21;
pub const AL_EAXREVERB_ROOM_ROLLOFF_FACTOR: u32 = 22;
pub const AL_EAXREVERB_DECAY_HFLIMIT: u32 = 23;
pub const AL_CHORUS_WAVEFORM: u32 = 1;
pub const AL_CHORUS_PHASE: u32 = 2;
pub const AL_CHORUS_RATE: u32 = 3;
pub const AL_CHORUS_DEPTH: u32 = 4;
pub const AL_CHORUS_FEEDBACK: u32 = 5;
pub const AL_CHORUS_DELAY: u32 = 6;
pub const AL_DISTORTION_EDGE: u32 = 1;
pub const AL_DISTORTION_GAIN: u32 = 2;
pub const AL_DISTORTION_LOWPASS_CUTOFF: u32 = 3;
pub const AL_DISTORTION_EQCENTER: u32 = 4;
pub const AL_DISTORTION_EQBANDWIDTH: u32 = 5;
pub const AL_ECHO_DELAY: u32 = 1;
pub const AL_ECHO_LRDELAY: u32 = 2;
pub const AL_ECHO_DAMPING: u32 = 3;
pub const AL_ECHO_FEEDBACK: u32 = 4;
pub const AL_ECHO_SPREAD: u32 = 5;
pub const AL_FLANGER_WAVEFORM: u32 = 1;
pub const AL_FLANGER_PHASE: u32 = 2;
pub const AL_FLANGER_RATE: u32 = 3;
pub const AL_FLANGER_DEPTH: u32 = 4;
pub const AL_FLANGER_FEEDBACK: u32 = 5;
pub const AL_FLANGER_DELAY: u32 = 6;
pub const AL_FREQUENCY_SHIFTER_FREQUENCY: u32 = 1;
pub const AL_FREQUENCY_SHIFTER_LEFT_DIRECTION: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION: u32 = 3;
pub const AL_VOCAL_MORPHER_PHONEMEA: u32 = 1;
pub const AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING: u32 = 2;
pub const AL_VOCAL_MORPHER_PHONEMEB: u32 = 3;
pub const AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING: u32 = 4;
pub const AL_VOCAL_MORPHER_WAVEFORM: u32 = 5;
pub const AL_VOCAL_MORPHER_RATE: u32 = 6;
pub const AL_PITCH_SHIFTER_COARSE_TUNE: u32 = 1;
pub const AL_PITCH_SHIFTER_FINE_TUNE: u32 = 2;
pub const AL_RING_MODULATOR_FREQUENCY: u32 = 1;
pub const AL_RING_MODULATOR_HIGHPASS_CUTOFF: u32 = 2;
pub const AL_RING_MODULATOR_WAVEFORM: u32 = 3;
pub const AL_AUTOWAH_ATTACK_TIME: u32 = 1;
pub const AL_AUTOWAH_RELEASE_TIME: u32 = 2;
pub const AL_AUTOWAH_RESONANCE: u32 = 3;
pub const AL_AUTOWAH_PEAK_GAIN: u32 = 4;
pub const AL_COMPRESSOR_ONOFF: u32 = 1;
pub const AL_EQUALIZER_LOW_GAIN: u32 = 1;
pub const AL_EQUALIZER_LOW_CUTOFF: u32 = 2;
pub const AL_EQUALIZER_MID1_GAIN: u32 = 3;
pub const AL_EQUALIZER_MID1_CENTER: u32 = 4;
pub const AL_EQUALIZER_MID1_WIDTH: u32 = 5;
pub const AL_EQUALIZER_MID2_GAIN: u32 = 6;
pub const AL_EQUALIZER_MID2_CENTER: u32 = 7;
pub const AL_EQUALIZER_MID2_WIDTH: u32 = 8;
pub const AL_EQUALIZER_HIGH_GAIN: u32 = 9;
pub const AL_EQUALIZER_HIGH_CUTOFF: u32 = 10;
pub const AL_EFFECT_FIRST_PARAMETER: u32 = 0;
pub const AL_EFFECT_LAST_PARAMETER: u32 = 32768;
pub const AL_EFFECT_TYPE: u32 = 32769;
pub const AL_EFFECT_NULL: u32 = 0;
pub const AL_EFFECT_REVERB: u32 = 1;
pub const AL_EFFECT_CHORUS: u32 = 2;
pub const AL_EFFECT_DISTORTION: u32 = 3;
pub const AL_EFFECT_ECHO: u32 = 4;
pub const AL_EFFECT_FLANGER: u32 = 5;
pub const AL_EFFECT_FREQUENCY_SHIFTER: u32 = 6;
pub const AL_EFFECT_VOCAL_MORPHER: u32 = 7;
pub const AL_EFFECT_PITCH_SHIFTER: u32 = 8;
pub const AL_EFFECT_RING_MODULATOR: u32 = 9;
pub const AL_EFFECT_AUTOWAH: u32 = 10;
pub const AL_EFFECT_COMPRESSOR: u32 = 11;
pub const AL_EFFECT_EQUALIZER: u32 = 12;
pub const AL_EFFECT_EAXREVERB: u32 = 32768;
pub const AL_EFFECTSLOT_EFFECT: u32 = 1;
pub const AL_EFFECTSLOT_GAIN: u32 = 2;
pub const AL_EFFECTSLOT_AUXILIARY_SEND_AUTO: u32 = 3;
pub const AL_EFFECTSLOT_NULL: u32 = 0;
pub const AL_LOWPASS_GAIN: u32 = 1;
pub const AL_LOWPASS_GAINHF: u32 = 2;
pub const AL_HIGHPASS_GAIN: u32 = 1;
pub const AL_HIGHPASS_GAINLF: u32 = 2;
pub const AL_BANDPASS_GAIN: u32 = 1;
pub const AL_BANDPASS_GAINLF: u32 = 2;
pub const AL_BANDPASS_GAINHF: u32 = 3;
pub const AL_FILTER_FIRST_PARAMETER: u32 = 0;
pub const AL_FILTER_LAST_PARAMETER: u32 = 32768;
pub const AL_FILTER_TYPE: u32 = 32769;
pub const AL_FILTER_NULL: u32 = 0;
pub const AL_FILTER_LOWPASS: u32 = 1;
pub const AL_FILTER_HIGHPASS: u32 = 2;
pub const AL_FILTER_BANDPASS: u32 = 3;
pub const AL_LOWPASS_MIN_GAIN: f64 = 0.0;
pub const AL_LOWPASS_MAX_GAIN: f64 = 1.0;
pub const AL_LOWPASS_DEFAULT_GAIN: f64 = 1.0;
pub const AL_LOWPASS_MIN_GAINHF: f64 = 0.0;
pub const AL_LOWPASS_MAX_GAINHF: f64 = 1.0;
pub const AL_LOWPASS_DEFAULT_GAINHF: f64 = 1.0;
pub const AL_HIGHPASS_MIN_GAIN: f64 = 0.0;
pub const AL_HIGHPASS_MAX_GAIN: f64 = 1.0;
pub const AL_HIGHPASS_DEFAULT_GAIN: f64 = 1.0;
pub const AL_HIGHPASS_MIN_GAINLF: f64 = 0.0;
pub const AL_HIGHPASS_MAX_GAINLF: f64 = 1.0;
pub const AL_HIGHPASS_DEFAULT_GAINLF: f64 = 1.0;
pub const AL_BANDPASS_MIN_GAIN: f64 = 0.0;
pub const AL_BANDPASS_MAX_GAIN: f64 = 1.0;
pub const AL_BANDPASS_DEFAULT_GAIN: f64 = 1.0;
pub const AL_BANDPASS_MIN_GAINHF: f64 = 0.0;
pub const AL_BANDPASS_MAX_GAINHF: f64 = 1.0;
pub const AL_BANDPASS_DEFAULT_GAINHF: f64 = 1.0;
pub const AL_BANDPASS_MIN_GAINLF: f64 = 0.0;
pub const AL_BANDPASS_MAX_GAINLF: f64 = 1.0;
pub const AL_BANDPASS_DEFAULT_GAINLF: f64 = 1.0;
pub const AL_REVERB_MIN_DENSITY: f64 = 0.0;
pub const AL_REVERB_MAX_DENSITY: f64 = 1.0;
pub const AL_REVERB_DEFAULT_DENSITY: f64 = 1.0;
pub const AL_REVERB_MIN_DIFFUSION: f64 = 0.0;
pub const AL_REVERB_MAX_DIFFUSION: f64 = 1.0;
pub const AL_REVERB_DEFAULT_DIFFUSION: f64 = 1.0;
pub const AL_REVERB_MIN_GAIN: f64 = 0.0;
pub const AL_REVERB_MAX_GAIN: f64 = 1.0;
pub const AL_REVERB_DEFAULT_GAIN: f64 = 0.32;
pub const AL_REVERB_MIN_GAINHF: f64 = 0.0;
pub const AL_REVERB_MAX_GAINHF: f64 = 1.0;
pub const AL_REVERB_DEFAULT_GAINHF: f64 = 0.89;
pub const AL_REVERB_MIN_DECAY_TIME: f64 = 0.1;
pub const AL_REVERB_MAX_DECAY_TIME: f64 = 20.0;
pub const AL_REVERB_DEFAULT_DECAY_TIME: f64 = 1.49;
pub const AL_REVERB_MIN_DECAY_HFRATIO: f64 = 0.1;
pub const AL_REVERB_MAX_DECAY_HFRATIO: f64 = 2.0;
pub const AL_REVERB_DEFAULT_DECAY_HFRATIO: f64 = 0.83;
pub const AL_REVERB_MIN_REFLECTIONS_GAIN: f64 = 0.0;
pub const AL_REVERB_MAX_REFLECTIONS_GAIN: f64 = 3.16;
pub const AL_REVERB_DEFAULT_REFLECTIONS_GAIN: f64 = 0.05;
pub const AL_REVERB_MIN_REFLECTIONS_DELAY: f64 = 0.0;
pub const AL_REVERB_MAX_REFLECTIONS_DELAY: f64 = 0.3;
pub const AL_REVERB_DEFAULT_REFLECTIONS_DELAY: f64 = 0.007;
pub const AL_REVERB_MIN_LATE_REVERB_GAIN: f64 = 0.0;
pub const AL_REVERB_MAX_LATE_REVERB_GAIN: f64 = 10.0;
pub const AL_REVERB_DEFAULT_LATE_REVERB_GAIN: f64 = 1.26;
pub const AL_REVERB_MIN_LATE_REVERB_DELAY: f64 = 0.0;
pub const AL_REVERB_MAX_LATE_REVERB_DELAY: f64 = 0.1;
pub const AL_REVERB_DEFAULT_LATE_REVERB_DELAY: f64 = 0.011;
pub const AL_REVERB_MIN_AIR_ABSORPTION_GAINHF: f64 = 0.892;
pub const AL_REVERB_MAX_AIR_ABSORPTION_GAINHF: f64 = 1.0;
pub const AL_REVERB_DEFAULT_AIR_ABSORPTION_GAINHF: f64 = 0.994;
pub const AL_REVERB_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_REVERB_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.0;
pub const AL_REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_REVERB_MIN_DECAY_HFLIMIT: u32 = 0;
pub const AL_REVERB_MAX_DECAY_HFLIMIT: u32 = 1;
pub const AL_REVERB_DEFAULT_DECAY_HFLIMIT: u32 = 1;
pub const AL_EAXREVERB_MIN_DENSITY: f64 = 0.0;
pub const AL_EAXREVERB_MAX_DENSITY: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_DENSITY: f64 = 1.0;
pub const AL_EAXREVERB_MIN_DIFFUSION: f64 = 0.0;
pub const AL_EAXREVERB_MAX_DIFFUSION: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_DIFFUSION: f64 = 1.0;
pub const AL_EAXREVERB_MIN_GAIN: f64 = 0.0;
pub const AL_EAXREVERB_MAX_GAIN: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_GAIN: f64 = 0.32;
pub const AL_EAXREVERB_MIN_GAINHF: f64 = 0.0;
pub const AL_EAXREVERB_MAX_GAINHF: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_GAINHF: f64 = 0.89;
pub const AL_EAXREVERB_MIN_GAINLF: f64 = 0.0;
pub const AL_EAXREVERB_MAX_GAINLF: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_GAINLF: f64 = 1.0;
pub const AL_EAXREVERB_MIN_DECAY_TIME: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_TIME: f64 = 20.0;
pub const AL_EAXREVERB_DEFAULT_DECAY_TIME: f64 = 1.49;
pub const AL_EAXREVERB_MIN_DECAY_HFRATIO: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_HFRATIO: f64 = 2.0;
pub const AL_EAXREVERB_DEFAULT_DECAY_HFRATIO: f64 = 0.83;
pub const AL_EAXREVERB_MIN_DECAY_LFRATIO: f64 = 0.1;
pub const AL_EAXREVERB_MAX_DECAY_LFRATIO: f64 = 2.0;
pub const AL_EAXREVERB_DEFAULT_DECAY_LFRATIO: f64 = 1.0;
pub const AL_EAXREVERB_MIN_REFLECTIONS_GAIN: f64 = 0.0;
pub const AL_EAXREVERB_MAX_REFLECTIONS_GAIN: f64 = 3.16;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_GAIN: f64 = 0.05;
pub const AL_EAXREVERB_MIN_REFLECTIONS_DELAY: f64 = 0.0;
pub const AL_EAXREVERB_MAX_REFLECTIONS_DELAY: f64 = 0.3;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_DELAY: f64 = 0.007;
pub const AL_EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ: f64 = 0.0;
pub const AL_EAXREVERB_MIN_LATE_REVERB_GAIN: f64 = 0.0;
pub const AL_EAXREVERB_MAX_LATE_REVERB_GAIN: f64 = 10.0;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_GAIN: f64 = 1.26;
pub const AL_EAXREVERB_MIN_LATE_REVERB_DELAY: f64 = 0.0;
pub const AL_EAXREVERB_MAX_LATE_REVERB_DELAY: f64 = 0.1;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_DELAY: f64 = 0.011;
pub const AL_EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ: f64 = 0.0;
pub const AL_EAXREVERB_MIN_ECHO_TIME: f64 = 0.075;
pub const AL_EAXREVERB_MAX_ECHO_TIME: f64 = 0.25;
pub const AL_EAXREVERB_DEFAULT_ECHO_TIME: f64 = 0.25;
pub const AL_EAXREVERB_MIN_ECHO_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MAX_ECHO_DEPTH: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_ECHO_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MIN_MODULATION_TIME: f64 = 0.04;
pub const AL_EAXREVERB_MAX_MODULATION_TIME: f64 = 4.0;
pub const AL_EAXREVERB_DEFAULT_MODULATION_TIME: f64 = 0.25;
pub const AL_EAXREVERB_MIN_MODULATION_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MAX_MODULATION_DEPTH: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_MODULATION_DEPTH: f64 = 0.0;
pub const AL_EAXREVERB_MIN_AIR_ABSORPTION_GAINHF: f64 = 0.892;
pub const AL_EAXREVERB_MAX_AIR_ABSORPTION_GAINHF: f64 = 1.0;
pub const AL_EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF: f64 = 0.994;
pub const AL_EAXREVERB_MIN_HFREFERENCE: f64 = 1000.0;
pub const AL_EAXREVERB_MAX_HFREFERENCE: f64 = 20000.0;
pub const AL_EAXREVERB_DEFAULT_HFREFERENCE: f64 = 5000.0;
pub const AL_EAXREVERB_MIN_LFREFERENCE: f64 = 20.0;
pub const AL_EAXREVERB_MAX_LFREFERENCE: f64 = 1000.0;
pub const AL_EAXREVERB_DEFAULT_LFREFERENCE: f64 = 250.0;
pub const AL_EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.0;
pub const AL_EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_EAXREVERB_MIN_DECAY_HFLIMIT: u32 = 0;
pub const AL_EAXREVERB_MAX_DECAY_HFLIMIT: u32 = 1;
pub const AL_EAXREVERB_DEFAULT_DECAY_HFLIMIT: u32 = 1;
pub const AL_CHORUS_WAVEFORM_SINUSOID: u32 = 0;
pub const AL_CHORUS_WAVEFORM_TRIANGLE: u32 = 1;
pub const AL_CHORUS_MIN_WAVEFORM: u32 = 0;
pub const AL_CHORUS_MAX_WAVEFORM: u32 = 1;
pub const AL_CHORUS_DEFAULT_WAVEFORM: u32 = 1;
pub const AL_CHORUS_MIN_PHASE: i32 = -180;
pub const AL_CHORUS_MAX_PHASE: u32 = 180;
pub const AL_CHORUS_DEFAULT_PHASE: u32 = 90;
pub const AL_CHORUS_MIN_RATE: f64 = 0.0;
pub const AL_CHORUS_MAX_RATE: f64 = 10.0;
pub const AL_CHORUS_DEFAULT_RATE: f64 = 1.1;
pub const AL_CHORUS_MIN_DEPTH: f64 = 0.0;
pub const AL_CHORUS_MAX_DEPTH: f64 = 1.0;
pub const AL_CHORUS_DEFAULT_DEPTH: f64 = 0.1;
pub const AL_CHORUS_MIN_FEEDBACK: f64 = -1.0;
pub const AL_CHORUS_MAX_FEEDBACK: f64 = 1.0;
pub const AL_CHORUS_DEFAULT_FEEDBACK: f64 = 0.25;
pub const AL_CHORUS_MIN_DELAY: f64 = 0.0;
pub const AL_CHORUS_MAX_DELAY: f64 = 0.016;
pub const AL_CHORUS_DEFAULT_DELAY: f64 = 0.016;
pub const AL_DISTORTION_MIN_EDGE: f64 = 0.0;
pub const AL_DISTORTION_MAX_EDGE: f64 = 1.0;
pub const AL_DISTORTION_DEFAULT_EDGE: f64 = 0.2;
pub const AL_DISTORTION_MIN_GAIN: f64 = 0.01;
pub const AL_DISTORTION_MAX_GAIN: f64 = 1.0;
pub const AL_DISTORTION_DEFAULT_GAIN: f64 = 0.05;
pub const AL_DISTORTION_MIN_LOWPASS_CUTOFF: f64 = 80.0;
pub const AL_DISTORTION_MAX_LOWPASS_CUTOFF: f64 = 24000.0;
pub const AL_DISTORTION_DEFAULT_LOWPASS_CUTOFF: f64 = 8000.0;
pub const AL_DISTORTION_MIN_EQCENTER: f64 = 80.0;
pub const AL_DISTORTION_MAX_EQCENTER: f64 = 24000.0;
pub const AL_DISTORTION_DEFAULT_EQCENTER: f64 = 3600.0;
pub const AL_DISTORTION_MIN_EQBANDWIDTH: f64 = 80.0;
pub const AL_DISTORTION_MAX_EQBANDWIDTH: f64 = 24000.0;
pub const AL_DISTORTION_DEFAULT_EQBANDWIDTH: f64 = 3600.0;
pub const AL_ECHO_MIN_DELAY: f64 = 0.0;
pub const AL_ECHO_MAX_DELAY: f64 = 0.207;
pub const AL_ECHO_DEFAULT_DELAY: f64 = 0.1;
pub const AL_ECHO_MIN_LRDELAY: f64 = 0.0;
pub const AL_ECHO_MAX_LRDELAY: f64 = 0.404;
pub const AL_ECHO_DEFAULT_LRDELAY: f64 = 0.1;
pub const AL_ECHO_MIN_DAMPING: f64 = 0.0;
pub const AL_ECHO_MAX_DAMPING: f64 = 0.99;
pub const AL_ECHO_DEFAULT_DAMPING: f64 = 0.5;
pub const AL_ECHO_MIN_FEEDBACK: f64 = 0.0;
pub const AL_ECHO_MAX_FEEDBACK: f64 = 1.0;
pub const AL_ECHO_DEFAULT_FEEDBACK: f64 = 0.5;
pub const AL_ECHO_MIN_SPREAD: f64 = -1.0;
pub const AL_ECHO_MAX_SPREAD: f64 = 1.0;
pub const AL_ECHO_DEFAULT_SPREAD: f64 = -1.0;
pub const AL_FLANGER_WAVEFORM_SINUSOID: u32 = 0;
pub const AL_FLANGER_WAVEFORM_TRIANGLE: u32 = 1;
pub const AL_FLANGER_MIN_WAVEFORM: u32 = 0;
pub const AL_FLANGER_MAX_WAVEFORM: u32 = 1;
pub const AL_FLANGER_DEFAULT_WAVEFORM: u32 = 1;
pub const AL_FLANGER_MIN_PHASE: i32 = -180;
pub const AL_FLANGER_MAX_PHASE: u32 = 180;
pub const AL_FLANGER_DEFAULT_PHASE: u32 = 0;
pub const AL_FLANGER_MIN_RATE: f64 = 0.0;
pub const AL_FLANGER_MAX_RATE: f64 = 10.0;
pub const AL_FLANGER_DEFAULT_RATE: f64 = 0.27;
pub const AL_FLANGER_MIN_DEPTH: f64 = 0.0;
pub const AL_FLANGER_MAX_DEPTH: f64 = 1.0;
pub const AL_FLANGER_DEFAULT_DEPTH: f64 = 1.0;
pub const AL_FLANGER_MIN_FEEDBACK: f64 = -1.0;
pub const AL_FLANGER_MAX_FEEDBACK: f64 = 1.0;
pub const AL_FLANGER_DEFAULT_FEEDBACK: f64 = -0.5;
pub const AL_FLANGER_MIN_DELAY: f64 = 0.0;
pub const AL_FLANGER_MAX_DELAY: f64 = 0.004;
pub const AL_FLANGER_DEFAULT_DELAY: f64 = 0.002;
pub const AL_FREQUENCY_SHIFTER_MIN_FREQUENCY: f64 = 0.0;
pub const AL_FREQUENCY_SHIFTER_MAX_FREQUENCY: f64 = 24000.0;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_FREQUENCY: f64 = 0.0;
pub const AL_FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_DOWN: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_UP: u32 = 1;
pub const AL_FREQUENCY_SHIFTER_DIRECTION_OFF: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION: u32 = 0;
pub const AL_FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION: u32 = 2;
pub const AL_FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEA: u32 = 0;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEA: u32 = 29;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEA: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING: i32 = -24;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING: u32 = 24;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEB: u32 = 0;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEB: u32 = 29;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEB: u32 = 10;
pub const AL_VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING: i32 = -24;
pub const AL_VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING: u32 = 24;
pub const AL_VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING: u32 = 0;
pub const AL_VOCAL_MORPHER_PHONEME_A: u32 = 0;
pub const AL_VOCAL_MORPHER_PHONEME_E: u32 = 1;
pub const AL_VOCAL_MORPHER_PHONEME_I: u32 = 2;
pub const AL_VOCAL_MORPHER_PHONEME_O: u32 = 3;
pub const AL_VOCAL_MORPHER_PHONEME_U: u32 = 4;
pub const AL_VOCAL_MORPHER_PHONEME_AA: u32 = 5;
pub const AL_VOCAL_MORPHER_PHONEME_AE: u32 = 6;
pub const AL_VOCAL_MORPHER_PHONEME_AH: u32 = 7;
pub const AL_VOCAL_MORPHER_PHONEME_AO: u32 = 8;
pub const AL_VOCAL_MORPHER_PHONEME_EH: u32 = 9;
pub const AL_VOCAL_MORPHER_PHONEME_ER: u32 = 10;
pub const AL_VOCAL_MORPHER_PHONEME_IH: u32 = 11;
pub const AL_VOCAL_MORPHER_PHONEME_IY: u32 = 12;
pub const AL_VOCAL_MORPHER_PHONEME_UH: u32 = 13;
pub const AL_VOCAL_MORPHER_PHONEME_UW: u32 = 14;
pub const AL_VOCAL_MORPHER_PHONEME_B: u32 = 15;
pub const AL_VOCAL_MORPHER_PHONEME_D: u32 = 16;
pub const AL_VOCAL_MORPHER_PHONEME_F: u32 = 17;
pub const AL_VOCAL_MORPHER_PHONEME_G: u32 = 18;
pub const AL_VOCAL_MORPHER_PHONEME_J: u32 = 19;
pub const AL_VOCAL_MORPHER_PHONEME_K: u32 = 20;
pub const AL_VOCAL_MORPHER_PHONEME_L: u32 = 21;
pub const AL_VOCAL_MORPHER_PHONEME_M: u32 = 22;
pub const AL_VOCAL_MORPHER_PHONEME_N: u32 = 23;
pub const AL_VOCAL_MORPHER_PHONEME_P: u32 = 24;
pub const AL_VOCAL_MORPHER_PHONEME_R: u32 = 25;
pub const AL_VOCAL_MORPHER_PHONEME_S: u32 = 26;
pub const AL_VOCAL_MORPHER_PHONEME_T: u32 = 27;
pub const AL_VOCAL_MORPHER_PHONEME_V: u32 = 28;
pub const AL_VOCAL_MORPHER_PHONEME_Z: u32 = 29;
pub const AL_VOCAL_MORPHER_WAVEFORM_SINUSOID: u32 = 0;
pub const AL_VOCAL_MORPHER_WAVEFORM_TRIANGLE: u32 = 1;
pub const AL_VOCAL_MORPHER_WAVEFORM_SAWTOOTH: u32 = 2;
pub const AL_VOCAL_MORPHER_MIN_WAVEFORM: u32 = 0;
pub const AL_VOCAL_MORPHER_MAX_WAVEFORM: u32 = 2;
pub const AL_VOCAL_MORPHER_DEFAULT_WAVEFORM: u32 = 0;
pub const AL_VOCAL_MORPHER_MIN_RATE: f64 = 0.0;
pub const AL_VOCAL_MORPHER_MAX_RATE: f64 = 10.0;
pub const AL_VOCAL_MORPHER_DEFAULT_RATE: f64 = 1.41;
pub const AL_PITCH_SHIFTER_MIN_COARSE_TUNE: i32 = -12;
pub const AL_PITCH_SHIFTER_MAX_COARSE_TUNE: u32 = 12;
pub const AL_PITCH_SHIFTER_DEFAULT_COARSE_TUNE: u32 = 12;
pub const AL_PITCH_SHIFTER_MIN_FINE_TUNE: i32 = -50;
pub const AL_PITCH_SHIFTER_MAX_FINE_TUNE: u32 = 50;
pub const AL_PITCH_SHIFTER_DEFAULT_FINE_TUNE: u32 = 0;
pub const AL_RING_MODULATOR_MIN_FREQUENCY: f64 = 0.0;
pub const AL_RING_MODULATOR_MAX_FREQUENCY: f64 = 8000.0;
pub const AL_RING_MODULATOR_DEFAULT_FREQUENCY: f64 = 440.0;
pub const AL_RING_MODULATOR_MIN_HIGHPASS_CUTOFF: f64 = 0.0;
pub const AL_RING_MODULATOR_MAX_HIGHPASS_CUTOFF: f64 = 24000.0;
pub const AL_RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF: f64 = 800.0;
pub const AL_RING_MODULATOR_SINUSOID: u32 = 0;
pub const AL_RING_MODULATOR_SAWTOOTH: u32 = 1;
pub const AL_RING_MODULATOR_SQUARE: u32 = 2;
pub const AL_RING_MODULATOR_MIN_WAVEFORM: u32 = 0;
pub const AL_RING_MODULATOR_MAX_WAVEFORM: u32 = 2;
pub const AL_RING_MODULATOR_DEFAULT_WAVEFORM: u32 = 0;
pub const AL_AUTOWAH_MIN_ATTACK_TIME: f64 = 0.0001;
pub const AL_AUTOWAH_MAX_ATTACK_TIME: f64 = 1.0;
pub const AL_AUTOWAH_DEFAULT_ATTACK_TIME: f64 = 0.06;
pub const AL_AUTOWAH_MIN_RELEASE_TIME: f64 = 0.0001;
pub const AL_AUTOWAH_MAX_RELEASE_TIME: f64 = 1.0;
pub const AL_AUTOWAH_DEFAULT_RELEASE_TIME: f64 = 0.06;
pub const AL_AUTOWAH_MIN_RESONANCE: f64 = 2.0;
pub const AL_AUTOWAH_MAX_RESONANCE: f64 = 1000.0;
pub const AL_AUTOWAH_DEFAULT_RESONANCE: f64 = 1000.0;
pub const AL_AUTOWAH_MIN_PEAK_GAIN: f64 = 0.00003;
pub const AL_AUTOWAH_MAX_PEAK_GAIN: f64 = 31621.0;
pub const AL_AUTOWAH_DEFAULT_PEAK_GAIN: f64 = 11.22;
pub const AL_COMPRESSOR_MIN_ONOFF: u32 = 0;
pub const AL_COMPRESSOR_MAX_ONOFF: u32 = 1;
pub const AL_COMPRESSOR_DEFAULT_ONOFF: u32 = 1;
pub const AL_EQUALIZER_MIN_LOW_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_LOW_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_LOW_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_LOW_CUTOFF: f64 = 50.0;
pub const AL_EQUALIZER_MAX_LOW_CUTOFF: f64 = 800.0;
pub const AL_EQUALIZER_DEFAULT_LOW_CUTOFF: f64 = 200.0;
pub const AL_EQUALIZER_MIN_MID1_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_MID1_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_MID1_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_MID1_CENTER: f64 = 200.0;
pub const AL_EQUALIZER_MAX_MID1_CENTER: f64 = 3000.0;
pub const AL_EQUALIZER_DEFAULT_MID1_CENTER: f64 = 500.0;
pub const AL_EQUALIZER_MIN_MID1_WIDTH: f64 = 0.01;
pub const AL_EQUALIZER_MAX_MID1_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_DEFAULT_MID1_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_MIN_MID2_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_MID2_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_MID2_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_MID2_CENTER: f64 = 1000.0;
pub const AL_EQUALIZER_MAX_MID2_CENTER: f64 = 8000.0;
pub const AL_EQUALIZER_DEFAULT_MID2_CENTER: f64 = 3000.0;
pub const AL_EQUALIZER_MIN_MID2_WIDTH: f64 = 0.01;
pub const AL_EQUALIZER_MAX_MID2_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_DEFAULT_MID2_WIDTH: f64 = 1.0;
pub const AL_EQUALIZER_MIN_HIGH_GAIN: f64 = 0.126;
pub const AL_EQUALIZER_MAX_HIGH_GAIN: f64 = 7.943;
pub const AL_EQUALIZER_DEFAULT_HIGH_GAIN: f64 = 1.0;
pub const AL_EQUALIZER_MIN_HIGH_CUTOFF: f64 = 4000.0;
pub const AL_EQUALIZER_MAX_HIGH_CUTOFF: f64 = 16000.0;
pub const AL_EQUALIZER_DEFAULT_HIGH_CUTOFF: f64 = 6000.0;
pub const AL_MIN_AIR_ABSORPTION_FACTOR: f64 = 0.0;
pub const AL_MAX_AIR_ABSORPTION_FACTOR: f64 = 10.0;
pub const AL_DEFAULT_AIR_ABSORPTION_FACTOR: f64 = 0.0;
pub const AL_MIN_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_MAX_ROOM_ROLLOFF_FACTOR: f64 = 10.0;
pub const AL_DEFAULT_ROOM_ROLLOFF_FACTOR: f64 = 0.0;
pub const AL_MIN_CONE_OUTER_GAINHF: f64 = 0.0;
pub const AL_MAX_CONE_OUTER_GAINHF: f64 = 1.0;
pub const AL_DEFAULT_CONE_OUTER_GAINHF: f64 = 1.0;
pub const AL_MIN_DIRECT_FILTER_GAINHF_AUTO: u32 = 0;
pub const AL_MAX_DIRECT_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_DEFAULT_DIRECT_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 0;
pub const AL_MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 1;
pub const AL_DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO: u32 = 1;
pub const AL_MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 0;
pub const AL_MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO: u32 = 1;
pub const AL_DEFAULT_METERS_PER_UNIT: f64 = 1.0;
pub const ALC_EXT_disconnect: u32 = 1;
pub const ALC_CONNECTED: u32 = 787;
pub const ALC_EXT_thread_local_context: u32 = 1;
pub const AL_EXT_source_distance_model: u32 = 1;
pub const AL_SOURCE_DISTANCE_MODEL: u32 = 512;
pub const AL_SOFT_buffer_sub_data: u32 = 1;
pub const AL_BYTE_RW_OFFSETS_SOFT: u32 = 4145;
pub const AL_SAMPLE_RW_OFFSETS_SOFT: u32 = 4146;
pub const AL_SOFT_loop_points: u32 = 1;
pub const AL_LOOP_POINTS_SOFT: u32 = 8213;
pub const AL_EXT_FOLDBACK: u32 = 1;
pub const AL_EXT_FOLDBACK_NAME: &'static [u8; 16usize] = b"AL_EXT_FOLDBACK\0";
pub const AL_FOLDBACK_EVENT_BLOCK: u32 = 16658;
pub const AL_FOLDBACK_EVENT_START: u32 = 16657;
pub const AL_FOLDBACK_EVENT_STOP: u32 = 16659;
pub const AL_FOLDBACK_MODE_MONO: u32 = 16641;
pub const AL_FOLDBACK_MODE_STEREO: u32 = 16642;
pub const ALC_EXT_DEDICATED: u32 = 1;
pub const AL_DEDICATED_GAIN: u32 = 1;
pub const AL_EFFECT_DEDICATED_DIALOGUE: u32 = 36865;
pub const AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT: u32 = 36864;
pub const AL_SOFT_buffer_samples: u32 = 1;
pub const AL_MONO_SOFT: u32 = 5376;
pub const AL_STEREO_SOFT: u32 = 5377;
pub const AL_REAR_SOFT: u32 = 5378;
pub const AL_QUAD_SOFT: u32 = 5379;
pub const AL_5POINT1_SOFT: u32 = 5380;
pub const AL_6POINT1_SOFT: u32 = 5381;
pub const AL_7POINT1_SOFT: u32 = 5382;
pub const AL_BYTE_SOFT: u32 = 5120;
pub const AL_UNSIGNED_BYTE_SOFT: u32 = 5121;
pub const AL_SHORT_SOFT: u32 = 5122;
pub const AL_UNSIGNED_SHORT_SOFT: u32 = 5123;
pub const AL_INT_SOFT: u32 = 5124;
pub const AL_UNSIGNED_INT_SOFT: u32 = 5125;
pub const AL_FLOAT_SOFT: u32 = 5126;
pub const AL_DOUBLE_SOFT: u32 = 5127;
pub const AL_BYTE3_SOFT: u32 = 5128;
pub const AL_UNSIGNED_BYTE3_SOFT: u32 = 5129;
pub const AL_MONO8_SOFT: u32 = 4352;
pub const AL_MONO16_SOFT: u32 = 4353;
pub const AL_MONO32F_SOFT: u32 = 65552;
pub const AL_STEREO8_SOFT: u32 = 4354;
pub const AL_STEREO16_SOFT: u32 = 4355;
pub const AL_STEREO32F_SOFT: u32 = 65553;
pub const AL_QUAD8_SOFT: u32 = 4612;
pub const AL_QUAD16_SOFT: u32 = 4613;
pub const AL_QUAD32F_SOFT: u32 = 4614;
pub const AL_REAR8_SOFT: u32 = 4615;
pub const AL_REAR16_SOFT: u32 = 4616;
pub const AL_REAR32F_SOFT: u32 = 4617;
pub const AL_5POINT1_8_SOFT: u32 = 4618;
pub const AL_5POINT1_16_SOFT: u32 = 4619;
pub const AL_5POINT1_32F_SOFT: u32 = 4620;
pub const AL_6POINT1_8_SOFT: u32 = 4621;
pub const AL_6POINT1_16_SOFT: u32 = 4622;
pub const AL_6POINT1_32F_SOFT: u32 = 4623;
pub const AL_7POINT1_8_SOFT: u32 = 4624;
pub const AL_7POINT1_16_SOFT: u32 = 4625;
pub const AL_7POINT1_32F_SOFT: u32 = 4626;
pub const AL_INTERNAL_FORMAT_SOFT: u32 = 8200;
pub const AL_BYTE_LENGTH_SOFT: u32 = 8201;
pub const AL_SAMPLE_LENGTH_SOFT: u32 = 8202;
pub const AL_SEC_LENGTH_SOFT: u32 = 8203;
pub const AL_SOFT_direct_channels: u32 = 1;
pub const AL_DIRECT_CHANNELS_SOFT: u32 = 4147;
pub const ALC_SOFT_loopback: u32 = 1;
pub const ALC_FORMAT_CHANNELS_SOFT: u32 = 6544;
pub const ALC_FORMAT_TYPE_SOFT: u32 = 6545;
pub const ALC_BYTE_SOFT: u32 = 5120;
pub const ALC_UNSIGNED_BYTE_SOFT: u32 = 5121;
pub const ALC_SHORT_SOFT: u32 = 5122;
pub const ALC_UNSIGNED_SHORT_SOFT: u32 = 5123;
pub const ALC_INT_SOFT: u32 = 5124;
pub const ALC_UNSIGNED_INT_SOFT: u32 = 5125;
pub const ALC_FLOAT_SOFT: u32 = 5126;
pub const ALC_MONO_SOFT: u32 = 5376;
pub const ALC_STEREO_SOFT: u32 = 5377;
pub const ALC_QUAD_SOFT: u32 = 5379;
pub const ALC_5POINT1_SOFT: u32 = 5380;
pub const ALC_6POINT1_SOFT: u32 = 5381;
pub const ALC_7POINT1_SOFT: u32 = 5382;
pub const AL_EXT_STEREO_ANGLES: u32 = 1;
pub const AL_STEREO_ANGLES: u32 = 4144;
pub const AL_EXT_SOURCE_RADIUS: u32 = 1;
pub const AL_SOURCE_RADIUS: u32 = 4145;
pub const AL_SOFT_source_latency: u32 = 1;
pub const AL_SAMPLE_OFFSET_LATENCY_SOFT: u32 = 4608;
pub const AL_SEC_OFFSET_LATENCY_SOFT: u32 = 4609;
pub const ALC_EXT_DEFAULT_FILTER_ORDER: u32 = 1;
pub const ALC_DEFAULT_FILTER_ORDER: u32 = 4352;
pub const AL_SOFT_deferred_updates: u32 = 1;
pub const AL_DEFERRED_UPDATES_SOFT: u32 = 49154;
pub const AL_SOFT_block_alignment: u32 = 1;
pub const AL_UNPACK_BLOCK_ALIGNMENT_SOFT: u32 = 8204;
pub const AL_PACK_BLOCK_ALIGNMENT_SOFT: u32 = 8205;
pub const AL_SOFT_MSADPCM: u32 = 1;
pub const AL_FORMAT_MONO_MSADPCM_SOFT: u32 = 4866;
pub const AL_FORMAT_STEREO_MSADPCM_SOFT: u32 = 4867;
pub const AL_SOFT_source_length: u32 = 1;
pub const ALC_SOFT_pause_device: u32 = 1;
pub const AL_EXT_BFORMAT: u32 = 1;
pub const AL_FORMAT_BFORMAT2D_8: u32 = 131105;
pub const AL_FORMAT_BFORMAT2D_16: u32 = 131106;
pub const AL_FORMAT_BFORMAT2D_FLOAT32: u32 = 131107;
pub const AL_FORMAT_BFORMAT3D_8: u32 = 131121;
pub const AL_FORMAT_BFORMAT3D_16: u32 = 131122;
pub const AL_FORMAT_BFORMAT3D_FLOAT32: u32 = 131123;
pub const AL_EXT_MULAW_BFORMAT: u32 = 1;
pub const AL_FORMAT_BFORMAT2D_MULAW: u32 = 65585;
pub const AL_FORMAT_BFORMAT3D_MULAW: u32 = 65586;
pub const ALC_SOFT_HRTF: u32 = 1;
pub const ALC_HRTF_SOFT: u32 = 6546;
pub const ALC_DONT_CARE_SOFT: u32 = 2;
pub const ALC_HRTF_STATUS_SOFT: u32 = 6547;
pub const ALC_HRTF_DISABLED_SOFT: u32 = 0;
pub const ALC_HRTF_ENABLED_SOFT: u32 = 1;
pub const ALC_HRTF_DENIED_SOFT: u32 = 2;
pub const ALC_HRTF_REQUIRED_SOFT: u32 = 3;
pub const ALC_HRTF_HEADPHONES_DETECTED_SOFT: u32 = 4;
pub const ALC_HRTF_UNSUPPORTED_FORMAT_SOFT: u32 = 5;
pub const ALC_NUM_HRTF_SPECIFIERS_SOFT: u32 = 6548;
pub const ALC_HRTF_SPECIFIER_SOFT: u32 = 6549;
pub const ALC_HRTF_ID_SOFT: u32 = 6550;
pub const AL_SOFT_gain_clamp_ex: u32 = 1;
pub const AL_GAIN_LIMIT_SOFT: u32 = 8206;
pub const AL_NUM_RESAMPLERS_SOFT: u32 = 4624;
pub const AL_DEFAULT_RESAMPLER_SOFT: u32 = 4625;
pub const AL_SOURCE_RESAMPLER_SOFT: u32 = 4626;
pub const AL_RESAMPLER_NAME_SOFT: u32 = 4627;
pub const AL_SOURCE_SPATIALIZE_SOFT: u32 = 4628;
pub const AL_AUTO_SOFT: u32 = 2;
pub const ALC_OUTPUT_LIMITER_SOFT: u32 = 6554;
pub const ALC_SOFT_device_clock: u32 = 1;
pub const ALC_DEVICE_CLOCK_SOFT: u32 = 5632;
pub const ALC_DEVICE_LATENCY_SOFT: u32 = 5633;
pub const ALC_DEVICE_CLOCK_LATENCY_SOFT: u32 = 5634;
pub const AL_SAMPLE_OFFSET_CLOCK_SOFT: u32 = 4610;
pub const AL_SEC_OFFSET_CLOCK_SOFT: u32 = 4611;
pub const AL_SOFT_direct_channels_remix: u32 = 1;
pub const AL_DROP_UNMATCHED_SOFT: u32 = 1;
pub const AL_REMIX_UNMATCHED_SOFT: u32 = 2;
pub const AL_SOFT_bformat_ex: u32 = 1;
pub const AL_AMBISONIC_LAYOUT_SOFT: u32 = 6551;
pub const AL_AMBISONIC_SCALING_SOFT: u32 = 6552;
pub const AL_FUMA_SOFT: u32 = 0;
pub const AL_ACN_SOFT: u32 = 1;
pub const AL_SN3D_SOFT: u32 = 1;
pub const AL_N3D_SOFT: u32 = 2;
pub type ALboolean = ::std::os::raw::c_char;
pub type ALchar = ::std::os::raw::c_char;
pub type ALbyte = ::std::os::raw::c_schar;
pub type ALubyte = ::std::os::raw::c_uchar;
pub type ALshort = ::std::os::raw::c_short;
pub type ALushort = ::std::os::raw::c_ushort;
pub type ALint = ::std::os::raw::c_int;
pub type ALuint = ::std::os::raw::c_uint;
pub type ALsizei = ::std::os::raw::c_int;
pub type ALenum = ::std::os::raw::c_int;
pub type ALfloat = f32;
pub type ALdouble = f64;
pub type ALvoid = ::std::os::raw::c_void;
extern "C" {
    pub fn alDopplerFactor(value: ALfloat);
}
extern "C" {
    pub fn alDopplerVelocity(value: ALfloat);
}
extern "C" {
    pub fn alSpeedOfSound(value: ALfloat);
}
extern "C" {
    pub fn alDistanceModel(distanceModel: ALenum);
}
extern "C" {
    pub fn alEnable(capability: ALenum);
}
extern "C" {
    pub fn alDisable(capability: ALenum);
}
extern "C" {
    pub fn alIsEnabled(capability: ALenum) -> ALboolean;
}
extern "C" {
    pub fn alGetString(param: ALenum) -> *const ALchar;
}
extern "C" {
    pub fn alGetBooleanv(param: ALenum, values: *mut ALboolean);
}
extern "C" {
    pub fn alGetIntegerv(param: ALenum, values: *mut ALint);
}
extern "C" {
    pub fn alGetFloatv(param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetDoublev(param: ALenum, values: *mut ALdouble);
}
extern "C" {
    pub fn alGetBoolean(param: ALenum) -> ALboolean;
}
extern "C" {
    pub fn alGetInteger(param: ALenum) -> ALint;
}
extern "C" {
    pub fn alGetFloat(param: ALenum) -> ALfloat;
}
extern "C" {
    pub fn alGetDouble(param: ALenum) -> ALdouble;
}
extern "C" {
    pub fn alGetError() -> ALenum;
}
extern "C" {
    pub fn alIsExtensionPresent(extname: *const ALchar) -> ALboolean;
}
extern "C" {
    pub fn alGetProcAddress(fname: *const ALchar) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alGetEnumValue(ename: *const ALchar) -> ALenum;
}
extern "C" {
    pub fn alListenerf(param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alListener3f(param: ALenum, value1: ALfloat, value2: ALfloat, value3: ALfloat);
}
extern "C" {
    pub fn alListenerfv(param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alListeneri(param: ALenum, value: ALint);
}
extern "C" {
    pub fn alListener3i(param: ALenum, value1: ALint, value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alListeneriv(param: ALenum, values: *const ALint);
}
extern "C" {
    pub fn alGetListenerf(param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetListener3f(
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat,
    );
}
extern "C" {
    pub fn alGetListenerfv(param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetListeneri(param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetListener3i(
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint,
    );
}
extern "C" {
    pub fn alGetListeneriv(param: ALenum, values: *mut ALint);
}
extern "C" {
    pub fn alGenSources(n: ALsizei, sources: *mut ALuint);
}
extern "C" {
    pub fn alDeleteSources(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    pub fn alIsSource(source: ALuint) -> ALboolean;
}
extern "C" {
    pub fn alSourcef(source: ALuint, param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alSource3f(
        source: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat,
    );
}
extern "C" {
    pub fn alSourcefv(source: ALuint, param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alSourcei(source: ALuint, param: ALenum, value: ALint);
}
extern "C" {
    pub fn alSource3i(source: ALuint, param: ALenum, value1: ALint, value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alSourceiv(source: ALuint, param: ALenum, values: *const ALint);
}
extern "C" {
    pub fn alGetSourcef(source: ALuint, param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetSource3f(
        source: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat,
    );
}
extern "C" {
    pub fn alGetSourcefv(source: ALuint, param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetSourcei(source: ALuint, param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetSource3i(
        source: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint,
    );
}
extern "C" {
    pub fn alGetSourceiv(source: ALuint, param: ALenum, values: *mut ALint);
}
extern "C" {
    pub fn alSourcePlayv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    pub fn alSourceStopv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    pub fn alSourceRewindv(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    pub fn alSourcePausev(n: ALsizei, sources: *const ALuint);
}
extern "C" {
    pub fn alSourcePlay(source: ALuint);
}
extern "C" {
    pub fn alSourceStop(source: ALuint);
}
extern "C" {
    pub fn alSourceRewind(source: ALuint);
}
extern "C" {
    pub fn alSourcePause(source: ALuint);
}
extern "C" {
    pub fn alSourceQueueBuffers(source: ALuint, nb: ALsizei, buffers: *const ALuint);
}
extern "C" {
    pub fn alSourceUnqueueBuffers(source: ALuint, nb: ALsizei, buffers: *mut ALuint);
}
extern "C" {
    pub fn alGenBuffers(n: ALsizei, buffers: *mut ALuint);
}
extern "C" {
    pub fn alDeleteBuffers(n: ALsizei, buffers: *const ALuint);
}
extern "C" {
    pub fn alIsBuffer(buffer: ALuint) -> ALboolean;
}
extern "C" {
    pub fn alBufferData(
        buffer: ALuint,
        format: ALenum,
        data: *const ALvoid,
        size: ALsizei,
        freq: ALsizei,
    );
}
extern "C" {
    pub fn alBufferf(buffer: ALuint, param: ALenum, value: ALfloat);
}
extern "C" {
    pub fn alBuffer3f(
        buffer: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat,
    );
}
extern "C" {
    pub fn alBufferfv(buffer: ALuint, param: ALenum, values: *const ALfloat);
}
extern "C" {
    pub fn alBufferi(buffer: ALuint, param: ALenum, value: ALint);
}
extern "C" {
    pub fn alBuffer3i(buffer: ALuint, param: ALenum, value1: ALint, value2: ALint, value3: ALint);
}
extern "C" {
    pub fn alBufferiv(buffer: ALuint, param: ALenum, values: *const ALint);
}
extern "C" {
    pub fn alGetBufferf(buffer: ALuint, param: ALenum, value: *mut ALfloat);
}
extern "C" {
    pub fn alGetBuffer3f(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat,
    );
}
extern "C" {
    pub fn alGetBufferfv(buffer: ALuint, param: ALenum, values: *mut ALfloat);
}
extern "C" {
    pub fn alGetBufferi(buffer: ALuint, param: ALenum, value: *mut ALint);
}
extern "C" {
    pub fn alGetBuffer3i(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint,
    );
}
extern "C" {
    pub fn alGetBufferiv(buffer: ALuint, param: ALenum, values: *mut ALint);
}
pub type LPALENABLE = ::std::option::Option<unsafe extern "C" fn(capability: ALenum)>;
pub type LPALDISABLE = ::std::option::Option<unsafe extern "C" fn(capability: ALenum)>;
pub type LPALISENABLED =
    ::std::option::Option<unsafe extern "C" fn(capability: ALenum) -> ALboolean>;
pub type LPALGETSTRING =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> *const ALchar>;
pub type LPALGETBOOLEANV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALboolean)>;
pub type LPALGETINTEGERV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALint)>;
pub type LPALGETFLOATV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALfloat)>;
pub type LPALGETDOUBLEV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALdouble)>;
pub type LPALGETBOOLEAN = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALboolean>;
pub type LPALGETINTEGER = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALint>;
pub type LPALGETFLOAT = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALfloat>;
pub type LPALGETDOUBLE = ::std::option::Option<unsafe extern "C" fn(param: ALenum) -> ALdouble>;
pub type LPALGETERROR = ::std::option::Option<unsafe extern "C" fn() -> ALenum>;
pub type LPALISEXTENSIONPRESENT =
    ::std::option::Option<unsafe extern "C" fn(extname: *const ALchar) -> ALboolean>;
pub type LPALGETPROCADDRESS = ::std::option::Option<
    unsafe extern "C" fn(fname: *const ALchar) -> *mut ::std::os::raw::c_void,
>;
pub type LPALGETENUMVALUE =
    ::std::option::Option<unsafe extern "C" fn(ename: *const ALchar) -> ALenum>;
pub type LPALLISTENERF = ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: ALfloat)>;
pub type LPALLISTENER3F = ::std::option::Option<
    unsafe extern "C" fn(param: ALenum, value1: ALfloat, value2: ALfloat, value3: ALfloat),
>;
pub type LPALLISTENERFV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *const ALfloat)>;
pub type LPALLISTENERI = ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: ALint)>;
pub type LPALLISTENER3I = ::std::option::Option<
    unsafe extern "C" fn(param: ALenum, value1: ALint, value2: ALint, value3: ALint),
>;
pub type LPALLISTENERIV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *const ALint)>;
pub type LPALGETLISTENERF =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: *mut ALfloat)>;
pub type LPALGETLISTENER3F = ::std::option::Option<
    unsafe extern "C" fn(
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat,
    ),
>;
pub type LPALGETLISTENERFV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALfloat)>;
pub type LPALGETLISTENERI =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, value: *mut ALint)>;
pub type LPALGETLISTENER3I = ::std::option::Option<
    unsafe extern "C" fn(param: ALenum, value1: *mut ALint, value2: *mut ALint, value3: *mut ALint),
>;
pub type LPALGETLISTENERIV =
    ::std::option::Option<unsafe extern "C" fn(param: ALenum, values: *mut ALint)>;
pub type LPALGENSOURCES =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *mut ALuint)>;
pub type LPALDELETESOURCES =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALISSOURCE = ::std::option::Option<unsafe extern "C" fn(source: ALuint) -> ALboolean>;
pub type LPALSOURCEF =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: ALfloat)>;
pub type LPALSOURCE3F = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat,
    ),
>;
pub type LPALSOURCEFV = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, param: ALenum, values: *const ALfloat),
>;
pub type LPALSOURCEI =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: ALint)>;
pub type LPALSOURCE3I = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: ALint,
        value2: ALint,
        value3: ALint,
    ),
>;
pub type LPALSOURCEIV = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, param: ALenum, values: *const ALint),
>;
pub type LPALGETSOURCEF =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: *mut ALfloat)>;
pub type LPALGETSOURCE3F = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat,
    ),
>;
pub type LPALGETSOURCEFV = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, param: ALenum, values: *mut ALfloat),
>;
pub type LPALGETSOURCEI =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, value: *mut ALint)>;
pub type LPALGETSOURCE3I = ::std::option::Option<
    unsafe extern "C" fn(
        source: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint,
    ),
>;
pub type LPALGETSOURCEIV =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, param: ALenum, values: *mut ALint)>;
pub type LPALSOURCEPLAYV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCESTOPV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCEREWINDV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCEPAUSEV =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, sources: *const ALuint)>;
pub type LPALSOURCEPLAY = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCESTOP = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEREWIND = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEPAUSE = ::std::option::Option<unsafe extern "C" fn(source: ALuint)>;
pub type LPALSOURCEQUEUEBUFFERS = ::std::option::Option<
    unsafe extern "C" fn(source: ALuint, nb: ALsizei, buffers: *const ALuint),
>;
pub type LPALSOURCEUNQUEUEBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(source: ALuint, nb: ALsizei, buffers: *mut ALuint)>;
pub type LPALGENBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, buffers: *mut ALuint)>;
pub type LPALDELETEBUFFERS =
    ::std::option::Option<unsafe extern "C" fn(n: ALsizei, buffers: *const ALuint)>;
pub type LPALISBUFFER = ::std::option::Option<unsafe extern "C" fn(buffer: ALuint) -> ALboolean>;
pub type LPALBUFFERDATA = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        format: ALenum,
        data: *const ALvoid,
        size: ALsizei,
        freq: ALsizei,
    ),
>;
pub type LPALBUFFERF =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: ALfloat)>;
pub type LPALBUFFER3F = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: ALfloat,
        value2: ALfloat,
        value3: ALfloat,
    ),
>;
pub type LPALBUFFERFV = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *const ALfloat),
>;
pub type LPALBUFFERI =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: ALint)>;
pub type LPALBUFFER3I = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: ALint,
        value2: ALint,
        value3: ALint,
    ),
>;
pub type LPALBUFFERIV = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *const ALint),
>;
pub type LPALGETBUFFERF =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: *mut ALfloat)>;
pub type LPALGETBUFFER3F = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALfloat,
        value2: *mut ALfloat,
        value3: *mut ALfloat,
    ),
>;
pub type LPALGETBUFFERFV = ::std::option::Option<
    unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *mut ALfloat),
>;
pub type LPALGETBUFFERI =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, value: *mut ALint)>;
pub type LPALGETBUFFER3I = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: ALuint,
        param: ALenum,
        value1: *mut ALint,
        value2: *mut ALint,
        value3: *mut ALint,
    ),
>;
pub type LPALGETBUFFERIV =
    ::std::option::Option<unsafe extern "C" fn(buffer: ALuint, param: ALenum, values: *mut ALint)>;
pub type LPALDOPPLERFACTOR = ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALDOPPLERVELOCITY = ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALSPEEDOFSOUND = ::std::option::Option<unsafe extern "C" fn(value: ALfloat)>;
pub type LPALDISTANCEMODEL = ::std::option::Option<unsafe extern "C" fn(distanceModel: ALenum)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCdevice {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALCcontext {
    _unused: [u8; 0],
}
pub type ALCboolean = ::std::os::raw::c_char;
pub type ALCchar = ::std::os::raw::c_char;
pub type ALCbyte = ::std::os::raw::c_schar;
pub type ALCubyte = ::std::os::raw::c_uchar;
pub type ALCshort = ::std::os::raw::c_short;
pub type ALCushort = ::std::os::raw::c_ushort;
pub type ALCint = ::std::os::raw::c_int;
pub type ALCuint = ::std::os::raw::c_uint;
pub type ALCsizei = ::std::os::raw::c_int;
pub type ALCenum = ::std::os::raw::c_int;
pub type ALCfloat = f32;
pub type ALCdouble = f64;
pub type ALCvoid = ::std::os::raw::c_void;
extern "C" {
    pub fn alcCreateContext(device: *mut ALCdevice, attrlist: *const ALCint) -> *mut ALCcontext;
}
extern "C" {
    pub fn alcMakeContextCurrent(context: *mut ALCcontext) -> ALCboolean;
}
extern "C" {
    pub fn alcProcessContext(context: *mut ALCcontext);
}
extern "C" {
    pub fn alcSuspendContext(context: *mut ALCcontext);
}
extern "C" {
    pub fn alcDestroyContext(context: *mut ALCcontext);
}
extern "C" {
    pub fn alcGetCurrentContext() -> *mut ALCcontext;
}
extern "C" {
    pub fn alcGetContextsDevice(context: *mut ALCcontext) -> *mut ALCdevice;
}
extern "C" {
    pub fn alcOpenDevice(devicename: *const ALCchar) -> *mut ALCdevice;
}
extern "C" {
    pub fn alcCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    pub fn alcGetError(device: *mut ALCdevice) -> ALCenum;
}
extern "C" {
    pub fn alcIsExtensionPresent(device: *mut ALCdevice, extname: *const ALCchar) -> ALCboolean;
}
extern "C" {
    pub fn alcGetProcAddress(
        device: *mut ALCdevice,
        funcname: *const ALCchar,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alcGetEnumValue(device: *mut ALCdevice, enumname: *const ALCchar) -> ALCenum;
}
extern "C" {
    pub fn alcGetString(device: *mut ALCdevice, param: ALCenum) -> *const ALCchar;
}
extern "C" {
    pub fn alcGetIntegerv(
        device: *mut ALCdevice,
        param: ALCenum,
        size: ALCsizei,
        values: *mut ALCint,
    );
}
extern "C" {
    pub fn alcCaptureOpenDevice(
        devicename: *const ALCchar,
        frequency: ALCuint,
        format: ALCenum,
        buffersize: ALCsizei,
    ) -> *mut ALCdevice;
}
extern "C" {
    pub fn alcCaptureCloseDevice(device: *mut ALCdevice) -> ALCboolean;
}
extern "C" {
    pub fn alcCaptureStart(device: *mut ALCdevice);
}
extern "C" {
    pub fn alcCaptureStop(device: *mut ALCdevice);
}
extern "C" {
    pub fn alcCaptureSamples(device: *mut ALCdevice, buffer: *mut ALCvoid, samples: ALCsizei);
}
pub type LPALCCREATECONTEXT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, attrlist: *const ALCint) -> *mut ALCcontext,
>;
pub type LPALCMAKECONTEXTCURRENT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> ALCboolean>;
pub type LPALCPROCESSCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCSUSPENDCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCDESTROYCONTEXT =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext)>;
pub type LPALCGETCURRENTCONTEXT = ::std::option::Option<unsafe extern "C" fn() -> *mut ALCcontext>;
pub type LPALCGETCONTEXTSDEVICE =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> *mut ALCdevice>;
pub type LPALCOPENDEVICE =
    ::std::option::Option<unsafe extern "C" fn(devicename: *const ALCchar) -> *mut ALCdevice>;
pub type LPALCCLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCboolean>;
pub type LPALCGETERROR =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCenum>;
pub type LPALCISEXTENSIONPRESENT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, extname: *const ALCchar) -> ALCboolean,
>;
pub type LPALCGETPROCADDRESS = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        funcname: *const ALCchar,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type LPALCGETENUMVALUE = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, enumname: *const ALCchar) -> ALCenum,
>;
pub type LPALCGETSTRING = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, param: ALCenum) -> *const ALCchar,
>;
pub type LPALCGETINTEGERV = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        param: ALCenum,
        size: ALCsizei,
        values: *mut ALCint,
    ),
>;
pub type LPALCCAPTUREOPENDEVICE = ::std::option::Option<
    unsafe extern "C" fn(
        devicename: *const ALCchar,
        frequency: ALCuint,
        format: ALCenum,
        buffersize: ALCsizei,
    ) -> *mut ALCdevice,
>;
pub type LPALCCAPTURECLOSEDEVICE =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice) -> ALCboolean>;
pub type LPALCCAPTURESTART = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESTOP = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCCAPTURESAMPLES = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, buffer: *mut ALCvoid, samples: ALCsizei),
>;
pub type PFNALBUFFERDATASTATICPROC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALint,
        arg2: ALenum,
        arg3: *mut ALvoid,
        arg4: ALsizei,
        arg5: ALsizei,
    ) -> ALvoid,
>;
pub type LPALGENEFFECTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *mut ALuint)>;
pub type LPALDELETEEFFECTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *const ALuint)>;
pub type LPALISEFFECT = ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALEFFECTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint)>;
pub type LPALEFFECTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint)>;
pub type LPALEFFECTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALfloat)>;
pub type LPALEFFECTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALfloat)>;
pub type LPALGETEFFECTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETEFFECTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETEFFECTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGETEFFECTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGENFILTERS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *mut ALuint)>;
pub type LPALDELETEFILTERS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *const ALuint)>;
pub type LPALISFILTER = ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALFILTERI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint)>;
pub type LPALFILTERIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint)>;
pub type LPALFILTERF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALfloat)>;
pub type LPALFILTERFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALfloat)>;
pub type LPALGETFILTERI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETFILTERIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETFILTERF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGETFILTERFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGENAUXILIARYEFFECTSLOTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *mut ALuint)>;
pub type LPALDELETEAUXILIARYEFFECTSLOTS =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALsizei, arg2: *const ALuint)>;
pub type LPALISAUXILIARYEFFECTSLOT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint) -> ALboolean>;
pub type LPALAUXILIARYEFFECTSLOTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint)>;
pub type LPALAUXILIARYEFFECTSLOTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint)>;
pub type LPALAUXILIARYEFFECTSLOTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALfloat)>;
pub type LPALAUXILIARYEFFECTSLOTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALfloat)>;
pub type LPALGETAUXILIARYEFFECTSLOTI =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETAUXILIARYEFFECTSLOTIV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint)>;
pub type LPALGETAUXILIARYEFFECTSLOTF =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type LPALGETAUXILIARYEFFECTSLOTFV =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALfloat)>;
pub type PFNALCSETTHREADCONTEXTPROC =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ALCcontext) -> ALCboolean>;
pub type PFNALCGETTHREADCONTEXTPROC =
    ::std::option::Option<unsafe extern "C" fn() -> *mut ALCcontext>;
pub type PFNALBUFFERSUBDATASOFTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: *const ALvoid,
        arg4: ALsizei,
        arg5: ALsizei,
    ) -> ALvoid,
>;
pub type LPALFOLDBACKCALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALenum, arg2: ALsizei)>;
pub type LPALREQUESTFOLDBACKSTART = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALenum,
        arg2: ALsizei,
        arg3: ALsizei,
        arg4: *mut ALfloat,
        arg5: LPALFOLDBACKCALLBACK,
    ),
>;
pub type LPALREQUESTFOLDBACKSTOP = ::std::option::Option<unsafe extern "C" fn()>;
pub type LPALBUFFERSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALuint,
        arg3: ALenum,
        arg4: ALsizei,
        arg5: ALenum,
        arg6: ALenum,
        arg7: *const ALvoid,
    ),
>;
pub type LPALBUFFERSUBSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALsizei,
        arg3: ALsizei,
        arg4: ALenum,
        arg5: ALenum,
        arg6: *const ALvoid,
    ),
>;
pub type LPALGETBUFFERSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALsizei,
        arg3: ALsizei,
        arg4: ALenum,
        arg5: ALenum,
        arg6: *mut ALvoid,
    ),
>;
pub type LPALISBUFFERFORMATSUPPORTEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALenum) -> ALboolean>;
pub type LPALCLOOPBACKOPENDEVICESOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const ALCchar) -> *mut ALCdevice>;
pub type LPALCISRENDERFORMATSUPPORTEDSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ALCdevice,
        arg2: ALCsizei,
        arg3: ALCenum,
        arg4: ALCenum,
    ) -> ALCboolean,
>;
pub type LPALCRENDERSAMPLESSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ALCdevice, arg2: *mut ALCvoid, arg3: ALCsizei),
>;
pub type ALint64SOFT = i64;
pub type ALuint64SOFT = u64;
pub type LPALSOURCEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALdouble)>;
pub type LPALSOURCE3DSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: ALdouble,
        arg4: ALdouble,
        arg5: ALdouble,
    ),
>;
pub type LPALSOURCEDVSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALdouble)>;
pub type LPALGETSOURCEDSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALdouble)>;
pub type LPALGETSOURCE3DSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: *mut ALdouble,
        arg4: *mut ALdouble,
        arg5: *mut ALdouble,
    ),
>;
pub type LPALGETSOURCEDVSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALdouble)>;
pub type LPALSOURCEI64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: ALint64SOFT)>;
pub type LPALSOURCE3I64SOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: ALint64SOFT,
        arg4: ALint64SOFT,
        arg5: ALint64SOFT,
    ),
>;
pub type LPALSOURCEI64VSOFT = ::std::option::Option<
    unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *const ALint64SOFT),
>;
pub type LPALGETSOURCEI64SOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint64SOFT)>;
pub type LPALGETSOURCE3I64SOFT = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ALuint,
        arg2: ALenum,
        arg3: *mut ALint64SOFT,
        arg4: *mut ALint64SOFT,
        arg5: *mut ALint64SOFT,
    ),
>;
pub type LPALGETSOURCEI64VSOFT =
    ::std::option::Option<unsafe extern "C" fn(arg1: ALuint, arg2: ALenum, arg3: *mut ALint64SOFT)>;
pub type LPALDEFERUPDATESSOFT = ::std::option::Option<unsafe extern "C" fn() -> ALvoid>;
pub type LPALPROCESSUPDATESSOFT = ::std::option::Option<unsafe extern "C" fn() -> ALvoid>;
pub type LPALCDEVICEPAUSESOFT = ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCDEVICERESUMESOFT =
    ::std::option::Option<unsafe extern "C" fn(device: *mut ALCdevice)>;
pub type LPALCGETSTRINGISOFT = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        paramName: ALCenum,
        index: ALCsizei,
    ) -> *const ALCchar,
>;
pub type LPALCRESETDEVICESOFT = ::std::option::Option<
    unsafe extern "C" fn(device: *mut ALCdevice, attribs: *const ALCint) -> ALCboolean,
>;
pub type LPALGETSTRINGISOFT =
    ::std::option::Option<unsafe extern "C" fn(pname: ALenum, index: ALsizei) -> *const ALchar>;
pub type ALCint64SOFT = i64;
pub type ALCuint64SOFT = u64;
pub type LPALCGETINTEGER64VSOFT = ::std::option::Option<
    unsafe extern "C" fn(
        device: *mut ALCdevice,
        pname: ALCenum,
        size: ALsizei,
        values: *mut ALCint64SOFT,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EFXEAXREVERBPROPERTIES {
    pub flDensity: f32,
    pub flDiffusion: f32,
    pub flGain: f32,
    pub flGainHF: f32,
    pub flGainLF: f32,
    pub flDecayTime: f32,
    pub flDecayHFRatio: f32,
    pub flDecayLFRatio: f32,
    pub flReflectionsGain: f32,
    pub flReflectionsDelay: f32,
    pub flReflectionsPan: [f32; 3usize],
    pub flLateReverbGain: f32,
    pub flLateReverbDelay: f32,
    pub flLateReverbPan: [f32; 3usize],
    pub flEchoTime: f32,
    pub flEchoDepth: f32,
    pub flModulationTime: f32,
    pub flModulationDepth: f32,
    pub flAirAbsorptionGainHF: f32,
    pub flHFReference: f32,
    pub flLFReference: f32,
    pub flRoomRolloffFactor: f32,
    pub iDecayHFLimit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_EFXEAXREVERBPROPERTIES() {
    assert_eq!(
        ::std::mem::size_of::<EFXEAXREVERBPROPERTIES>(),
        108usize,
        concat!("Size of: ", stringify!(EFXEAXREVERBPROPERTIES))
    );
    assert_eq!(
        ::std::mem::align_of::<EFXEAXREVERBPROPERTIES>(),
        4usize,
        concat!("Alignment of ", stringify!(EFXEAXREVERBPROPERTIES))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flDensity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flDensity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flDiffusion as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flDiffusion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flGain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flGain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flGainHF as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flGainHF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flGainLF as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flGainLF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flDecayTime as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flDecayTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flDecayHFRatio as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flDecayHFRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flDecayLFRatio as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flDecayLFRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flReflectionsGain as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flReflectionsGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flReflectionsDelay as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flReflectionsDelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flReflectionsPan as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flReflectionsPan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flLateReverbGain as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flLateReverbGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flLateReverbDelay as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flLateReverbDelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flLateReverbPan as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flLateReverbPan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flEchoTime as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flEchoTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flEchoDepth as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flEchoDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flModulationTime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flModulationTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flModulationDepth as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flModulationDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flAirAbsorptionGainHF as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flAirAbsorptionGainHF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flHFReference as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flHFReference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flLFReference as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flLFReference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).flRoomRolloffFactor as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(flRoomRolloffFactor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<EFXEAXREVERBPROPERTIES>())).iDecayHFLimit as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(EFXEAXREVERBPROPERTIES),
            "::",
            stringify!(iDecayHFLimit)
        )
    );
}

/* automatically generated by build.rs */

impl EFXEAXREVERBPROPERTIES {
    #[doc = "EFX_REVERB_PRESET_GENERIC"]
    pub fn generic() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.8913,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.0500,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PADDEDCELL"]
    pub fn paddedcell() -> Self {
        Self {
            flDensity: 0.1715,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0010,
            flGainLF: 1.0000,
            flDecayTime: 0.1700,
            flDecayHFRatio: 0.1000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2500,
            flReflectionsDelay: 0.0010,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2691,
            flLateReverbDelay: 0.0020,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ROOM"]
    pub fn room() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.5929,
            flGainLF: 1.0000,
            flDecayTime: 0.4000,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.1503,
            flReflectionsDelay: 0.0020,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.0629,
            flLateReverbDelay: 0.0030,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_BATHROOM"]
    pub fn bathroom() -> Self {
        Self {
            flDensity: 0.1715,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.2512,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.5400,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.6531,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 3.2734,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_LIVINGROOM"]
    pub fn livingroom() -> Self {
        Self {
            flDensity: 0.9766,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0010,
            flGainLF: 1.0000,
            flDecayTime: 0.5000,
            flDecayHFRatio: 0.1000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2051,
            flReflectionsDelay: 0.0030,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.2805,
            flLateReverbDelay: 0.0040,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_STONEROOM"]
    pub fn stoneroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 1.0000,
            flDecayTime: 2.3100,
            flDecayHFRatio: 0.6400,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.4411,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1003,
            flLateReverbDelay: 0.0170,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_AUDITORIUM"]
    pub fn auditorium() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.5781,
            flGainLF: 1.0000,
            flDecayTime: 4.3200,
            flDecayHFRatio: 0.5900,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.4032,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7170,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CONCERTHALL"]
    pub fn concerthall() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 1.0000,
            flDecayTime: 3.9200,
            flDecayHFRatio: 0.7000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2427,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.9977,
            flLateReverbDelay: 0.0290,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CAVE"]
    pub fn cave() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 1.0000,
            flGainLF: 1.0000,
            flDecayTime: 2.9100,
            flDecayHFRatio: 1.3000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.5000,
            flReflectionsDelay: 0.0150,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7063,
            flLateReverbDelay: 0.0220,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ARENA"]
    pub fn arena() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.4477,
            flGainLF: 1.0000,
            flDecayTime: 7.2400,
            flDecayHFRatio: 0.3300,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2612,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.0186,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_HANGAR"]
    pub fn hangar() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.3162,
            flGainLF: 1.0000,
            flDecayTime: 10.0500,
            flDecayHFRatio: 0.2300,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.5000,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2560,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CARPETEDHALLWAY"]
    pub fn carpetedhallway() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0100,
            flGainLF: 1.0000,
            flDecayTime: 0.3000,
            flDecayHFRatio: 0.1000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.1215,
            flReflectionsDelay: 0.0020,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.1531,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_HALLWAY"]
    pub fn hallway() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.5900,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2458,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.6615,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_STONECORRIDOR"]
    pub fn stonecorridor() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.7612,
            flGainLF: 1.0000,
            flDecayTime: 2.7000,
            flDecayHFRatio: 0.7900,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2472,
            flReflectionsDelay: 0.0130,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.5758,
            flLateReverbDelay: 0.0200,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ALLEY"]
    pub fn alley() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.3000,
            flGain: 0.3162,
            flGainHF: 0.7328,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.8600,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2500,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.9954,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1250,
            flEchoDepth: 0.9500,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FOREST"]
    pub fn forest() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.3000,
            flGain: 0.3162,
            flGainHF: 0.0224,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.5400,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.0525,
            flReflectionsDelay: 0.1620,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7682,
            flLateReverbDelay: 0.0880,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1250,
            flEchoDepth: 1.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CITY"]
    pub fn city() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.5000,
            flGain: 0.3162,
            flGainHF: 0.3981,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.6700,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.0730,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.1427,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_MOUNTAINS"]
    pub fn mountains() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.2700,
            flGain: 0.3162,
            flGainHF: 0.0562,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.2100,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.0407,
            flReflectionsDelay: 0.3000,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.1919,
            flLateReverbDelay: 0.1000,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 1.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_QUARRY"]
    pub fn quarry() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.3162,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.0000,
            flReflectionsDelay: 0.0610,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.7783,
            flLateReverbDelay: 0.0250,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1250,
            flEchoDepth: 0.7000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PLAIN"]
    pub fn plain() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.2100,
            flGain: 0.3162,
            flGainHF: 0.1000,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.5000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.0585,
            flReflectionsDelay: 0.1790,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.1089,
            flLateReverbDelay: 0.1000,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 1.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PARKINGLOT"]
    pub fn parkinglot() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 1.0000,
            flGainLF: 1.0000,
            flDecayTime: 1.6500,
            flDecayHFRatio: 1.5000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.2082,
            flReflectionsDelay: 0.0080,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.2652,
            flLateReverbDelay: 0.0120,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SEWERPIPE"]
    pub fn sewerpipe() -> Self {
        Self {
            flDensity: 0.3071,
            flDiffusion: 0.8000,
            flGain: 0.3162,
            flGainHF: 0.3162,
            flGainLF: 1.0000,
            flDecayTime: 2.8100,
            flDecayHFRatio: 0.1400,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 1.6387,
            flReflectionsDelay: 0.0140,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 3.2471,
            flLateReverbDelay: 0.0210,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_UNDERWATER"]
    pub fn underwater() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0100,
            flGainLF: 1.0000,
            flDecayTime: 1.4900,
            flDecayHFRatio: 0.1000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.5963,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 7.0795,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 1.1800,
            flModulationDepth: 0.3480,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRUGGED"]
    pub fn drugged() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 0.5000,
            flGain: 0.3162,
            flGainHF: 1.0000,
            flGainLF: 1.0000,
            flDecayTime: 8.3900,
            flDecayHFRatio: 1.3900,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.8760,
            flReflectionsDelay: 0.0020,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 3.1081,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 1.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DIZZY"]
    pub fn dizzy() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 0.6000,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 1.0000,
            flDecayTime: 17.2300,
            flDecayHFRatio: 0.5600,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.1392,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.4937,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 1.0000,
            flModulationTime: 0.8100,
            flModulationDepth: 0.3100,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PSYCHOTIC"]
    pub fn psychotic() -> Self {
        Self {
            flDensity: 0.0625,
            flDiffusion: 0.5000,
            flGain: 0.3162,
            flGainHF: 0.8404,
            flGainLF: 1.0000,
            flDecayTime: 7.5600,
            flDecayHFRatio: 0.9100,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 0.4864,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 2.4378,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 4.0000,
            flModulationDepth: 1.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_SMALLROOM"]
    pub fn castle_smallroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8900,
            flGain: 0.3162,
            flGainHF: 0.3981,
            flGainLF: 0.1000,
            flDecayTime: 1.2200,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 0.3100,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0220,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.9953,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1380,
            flEchoDepth: 0.0800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_SHORTPASSAGE"]
    pub fn castle_shortpassage() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8900,
            flGain: 0.3162,
            flGainHF: 0.3162,
            flGainLF: 0.1000,
            flDecayTime: 2.3200,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 0.3100,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0230,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1380,
            flEchoDepth: 0.0800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_MEDIUMROOM"]
    pub fn castle_mediumroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.9300,
            flGain: 0.3162,
            flGainHF: 0.2818,
            flGainLF: 0.1000,
            flDecayTime: 2.0400,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 0.4600,
            flReflectionsGain: 0.6310,
            flReflectionsDelay: 0.0220,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.5849,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1550,
            flEchoDepth: 0.0300,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_LARGEROOM"]
    pub fn castle_largeroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.2818,
            flGainLF: 0.1259,
            flDecayTime: 2.5300,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 0.5000,
            flReflectionsGain: 0.4467,
            flReflectionsDelay: 0.0340,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0160,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1850,
            flEchoDepth: 0.0700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_LONGPASSAGE"]
    pub fn castle_longpassage() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8900,
            flGain: 0.3162,
            flGainHF: 0.3981,
            flGainLF: 0.1000,
            flDecayTime: 3.4200,
            flDecayHFRatio: 0.8300,
            flDecayLFRatio: 0.3100,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0230,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1380,
            flEchoDepth: 0.0800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_HALL"]
    pub fn castle_hall() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8100,
            flGain: 0.3162,
            flGainHF: 0.2818,
            flGainLF: 0.1778,
            flDecayTime: 3.1400,
            flDecayHFRatio: 0.7900,
            flDecayLFRatio: 0.6200,
            flReflectionsGain: 0.1778,
            flReflectionsDelay: 0.0560,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0240,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_CUPBOARD"]
    pub fn castle_cupboard() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8900,
            flGain: 0.3162,
            flGainHF: 0.2818,
            flGainLF: 0.1000,
            flDecayTime: 0.6700,
            flDecayHFRatio: 0.8700,
            flDecayLFRatio: 0.3100,
            flReflectionsGain: 1.4125,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 3.5481,
            flLateReverbDelay: 0.0070,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1380,
            flEchoDepth: 0.0800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_COURTYARD"]
    pub fn castle_courtyard() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.4200,
            flGain: 0.3162,
            flGainHF: 0.4467,
            flGainLF: 0.1995,
            flDecayTime: 2.1300,
            flDecayHFRatio: 0.6100,
            flDecayLFRatio: 0.2300,
            flReflectionsGain: 0.2239,
            flReflectionsDelay: 0.1600,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7079,
            flLateReverbDelay: 0.0360,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.3700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CASTLE_ALCOVE"]
    pub fn castle_alcove() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8900,
            flGain: 0.3162,
            flGainHF: 0.5012,
            flGainLF: 0.1000,
            flDecayTime: 1.6400,
            flDecayHFRatio: 0.8700,
            flDecayLFRatio: 0.3100,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0340,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1380,
            flEchoDepth: 0.0800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5168.6001,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_SMALLROOM"]
    pub fn factory_smallroom() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.7943,
            flGainLF: 0.5012,
            flDecayTime: 1.7200,
            flDecayHFRatio: 0.6500,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 0.7079,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.7783,
            flLateReverbDelay: 0.0240,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1190,
            flEchoDepth: 0.0700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_SHORTPASSAGE"]
    pub fn factory_shortpassage() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 0.6400,
            flGain: 0.2512,
            flGainHF: 0.7943,
            flGainLF: 0.5012,
            flDecayTime: 2.5300,
            flDecayHFRatio: 0.6500,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0380,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1350,
            flEchoDepth: 0.2300,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_MEDIUMROOM"]
    pub fn factory_mediumroom() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 0.8200,
            flGain: 0.2512,
            flGainHF: 0.7943,
            flGainLF: 0.5012,
            flDecayTime: 2.7600,
            flDecayHFRatio: 0.6500,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 0.2818,
            flReflectionsDelay: 0.0220,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0230,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1740,
            flEchoDepth: 0.0700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_LARGEROOM"]
    pub fn factory_largeroom() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 0.7500,
            flGain: 0.2512,
            flGainHF: 0.7079,
            flGainLF: 0.6310,
            flDecayTime: 4.2400,
            flDecayHFRatio: 0.5100,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 0.1778,
            flReflectionsDelay: 0.0390,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0230,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2310,
            flEchoDepth: 0.0700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_LONGPASSAGE"]
    pub fn factory_longpassage() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 0.6400,
            flGain: 0.2512,
            flGainHF: 0.7943,
            flGainLF: 0.5012,
            flDecayTime: 4.0600,
            flDecayHFRatio: 0.6500,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0370,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1350,
            flEchoDepth: 0.2300,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_HALL"]
    pub fn factory_hall() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 0.7500,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 0.6310,
            flDecayTime: 7.4300,
            flDecayHFRatio: 0.5100,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 0.0631,
            flReflectionsDelay: 0.0730,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0270,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_CUPBOARD"]
    pub fn factory_cupboard() -> Self {
        Self {
            flDensity: 0.3071,
            flDiffusion: 0.6300,
            flGain: 0.2512,
            flGainHF: 0.7943,
            flGainLF: 0.5012,
            flDecayTime: 0.4900,
            flDecayHFRatio: 0.6500,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 1.2589,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.9953,
            flLateReverbDelay: 0.0320,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1070,
            flEchoDepth: 0.0700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_COURTYARD"]
    pub fn factory_courtyard() -> Self {
        Self {
            flDensity: 0.3071,
            flDiffusion: 0.5700,
            flGain: 0.3162,
            flGainHF: 0.3162,
            flGainLF: 0.6310,
            flDecayTime: 2.3200,
            flDecayHFRatio: 0.2900,
            flDecayLFRatio: 0.5600,
            flReflectionsGain: 0.2239,
            flReflectionsDelay: 0.1400,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.3981,
            flLateReverbDelay: 0.0390,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.2900,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_FACTORY_ALCOVE"]
    pub fn factory_alcove() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 0.5900,
            flGain: 0.2512,
            flGainHF: 0.7943,
            flGainLF: 0.5012,
            flDecayTime: 3.1400,
            flDecayHFRatio: 0.6500,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 1.4125,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.0000,
            flLateReverbDelay: 0.0380,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1140,
            flEchoDepth: 0.1000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3762.6001,
            flLFReference: 362.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_SMALLROOM"]
    pub fn icepalace_smallroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8400,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.2818,
            flDecayTime: 1.5100,
            flDecayHFRatio: 1.5300,
            flDecayLFRatio: 0.2700,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1640,
            flEchoDepth: 0.1400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_SHORTPASSAGE"]
    pub fn icepalace_shortpassage() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7500,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.2818,
            flDecayTime: 1.7900,
            flDecayHFRatio: 1.4600,
            flDecayLFRatio: 0.2800,
            flReflectionsGain: 0.5012,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0190,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1770,
            flEchoDepth: 0.0900,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_MEDIUMROOM"]
    pub fn icepalace_mediumroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8700,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.4467,
            flDecayTime: 2.2200,
            flDecayHFRatio: 1.5300,
            flDecayLFRatio: 0.3200,
            flReflectionsGain: 0.3981,
            flReflectionsDelay: 0.0390,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0270,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1860,
            flEchoDepth: 0.1200,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_LARGEROOM"]
    pub fn icepalace_largeroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8100,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.4467,
            flDecayTime: 3.1400,
            flDecayHFRatio: 1.5300,
            flDecayLFRatio: 0.3200,
            flReflectionsGain: 0.2512,
            flReflectionsDelay: 0.0390,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.0000,
            flLateReverbDelay: 0.0270,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2140,
            flEchoDepth: 0.1100,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_LONGPASSAGE"]
    pub fn icepalace_longpassage() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7700,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.3981,
            flDecayTime: 3.0100,
            flDecayHFRatio: 1.4600,
            flDecayLFRatio: 0.2800,
            flReflectionsGain: 0.7943,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0250,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1860,
            flEchoDepth: 0.0400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_HALL"]
    pub fn icepalace_hall() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7600,
            flGain: 0.3162,
            flGainHF: 0.4467,
            flGainLF: 0.5623,
            flDecayTime: 5.4900,
            flDecayHFRatio: 1.5300,
            flDecayLFRatio: 0.3800,
            flReflectionsGain: 0.1122,
            flReflectionsDelay: 0.0540,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.6310,
            flLateReverbDelay: 0.0520,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2260,
            flEchoDepth: 0.1100,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_CUPBOARD"]
    pub fn icepalace_cupboard() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8300,
            flGain: 0.3162,
            flGainHF: 0.5012,
            flGainLF: 0.2239,
            flDecayTime: 0.7600,
            flDecayHFRatio: 1.5300,
            flDecayLFRatio: 0.2600,
            flReflectionsGain: 1.1220,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.9953,
            flLateReverbDelay: 0.0160,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1430,
            flEchoDepth: 0.0800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_COURTYARD"]
    pub fn icepalace_courtyard() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.5900,
            flGain: 0.3162,
            flGainHF: 0.2818,
            flGainLF: 0.3162,
            flDecayTime: 2.0400,
            flDecayHFRatio: 1.2000,
            flDecayLFRatio: 0.3800,
            flReflectionsGain: 0.3162,
            flReflectionsDelay: 0.1730,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.3162,
            flLateReverbDelay: 0.0430,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2350,
            flEchoDepth: 0.4800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_ICEPALACE_ALCOVE"]
    pub fn icepalace_alcove() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8400,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.2818,
            flDecayTime: 2.7600,
            flDecayHFRatio: 1.4600,
            flDecayLFRatio: 0.2800,
            flReflectionsGain: 1.1220,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1610,
            flEchoDepth: 0.0900,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 12428.5000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_SMALLROOM"]
    pub fn spacestation_smallroom() -> Self {
        Self {
            flDensity: 0.2109,
            flDiffusion: 0.7000,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 0.8913,
            flDecayTime: 1.7200,
            flDecayHFRatio: 0.8200,
            flDecayLFRatio: 0.5500,
            flReflectionsGain: 0.7943,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0130,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1880,
            flEchoDepth: 0.2600,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_SHORTPASSAGE"]
    pub fn spacestation_shortpassage() -> Self {
        Self {
            flDensity: 0.2109,
            flDiffusion: 0.8700,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 0.8913,
            flDecayTime: 3.5700,
            flDecayHFRatio: 0.5000,
            flDecayLFRatio: 0.5500,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0160,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1720,
            flEchoDepth: 0.2000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_MEDIUMROOM"]
    pub fn spacestation_mediumroom() -> Self {
        Self {
            flDensity: 0.2109,
            flDiffusion: 0.7500,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 0.8913,
            flDecayTime: 3.0100,
            flDecayHFRatio: 0.5000,
            flDecayLFRatio: 0.5500,
            flReflectionsGain: 0.3981,
            flReflectionsDelay: 0.0340,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0350,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2090,
            flEchoDepth: 0.3100,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_LARGEROOM"]
    pub fn spacestation_largeroom() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 0.8100,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 0.8913,
            flDecayTime: 3.8900,
            flDecayHFRatio: 0.3800,
            flDecayLFRatio: 0.6100,
            flReflectionsGain: 0.3162,
            flReflectionsDelay: 0.0560,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0350,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2330,
            flEchoDepth: 0.2800,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_LONGPASSAGE"]
    pub fn spacestation_longpassage() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 0.8913,
            flDecayTime: 4.6200,
            flDecayHFRatio: 0.6200,
            flDecayLFRatio: 0.5500,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0310,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.2300,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_HALL"]
    pub fn spacestation_hall() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 0.8700,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 0.8913,
            flDecayTime: 7.1100,
            flDecayHFRatio: 0.3800,
            flDecayLFRatio: 0.6100,
            flReflectionsGain: 0.1778,
            flReflectionsDelay: 0.1000,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.6310,
            flLateReverbDelay: 0.0470,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.2500,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_CUPBOARD"]
    pub fn spacestation_cupboard() -> Self {
        Self {
            flDensity: 0.1715,
            flDiffusion: 0.5600,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 0.8913,
            flDecayTime: 0.7900,
            flDecayHFRatio: 0.8100,
            flDecayLFRatio: 0.5500,
            flReflectionsGain: 1.4125,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.7783,
            flLateReverbDelay: 0.0180,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1810,
            flEchoDepth: 0.3100,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPACESTATION_ALCOVE"]
    pub fn spacestation_alcove() -> Self {
        Self {
            flDensity: 0.2109,
            flDiffusion: 0.7800,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 0.8913,
            flDecayTime: 1.1600,
            flDecayHFRatio: 0.8100,
            flDecayLFRatio: 0.5500,
            flReflectionsGain: 1.4125,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.0000,
            flLateReverbDelay: 0.0180,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1920,
            flEchoDepth: 0.2100,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 3316.1001,
            flLFReference: 458.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_SMALLROOM"]
    pub fn wooden_smallroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1122,
            flGainLF: 0.3162,
            flDecayTime: 0.7900,
            flDecayHFRatio: 0.3200,
            flDecayLFRatio: 0.8700,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0320,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0290,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_SHORTPASSAGE"]
    pub fn wooden_shortpassage() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1259,
            flGainLF: 0.3162,
            flDecayTime: 1.7500,
            flDecayHFRatio: 0.5000,
            flDecayLFRatio: 0.8700,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.6310,
            flLateReverbDelay: 0.0240,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_MEDIUMROOM"]
    pub fn wooden_mediumroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1000,
            flGainLF: 0.2818,
            flDecayTime: 1.4700,
            flDecayHFRatio: 0.4200,
            flDecayLFRatio: 0.8200,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0490,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0290,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_LARGEROOM"]
    pub fn wooden_largeroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0891,
            flGainLF: 0.2818,
            flDecayTime: 2.6500,
            flDecayHFRatio: 0.3300,
            flDecayLFRatio: 0.8200,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0660,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7943,
            flLateReverbDelay: 0.0490,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_LONGPASSAGE"]
    pub fn wooden_longpassage() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1000,
            flGainLF: 0.3162,
            flDecayTime: 1.9900,
            flDecayHFRatio: 0.4000,
            flDecayLFRatio: 0.7900,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.4467,
            flLateReverbDelay: 0.0360,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_HALL"]
    pub fn wooden_hall() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0794,
            flGainLF: 0.2818,
            flDecayTime: 3.4500,
            flDecayHFRatio: 0.3000,
            flDecayLFRatio: 0.8200,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0880,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7943,
            flLateReverbDelay: 0.0630,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_CUPBOARD"]
    pub fn wooden_cupboard() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1413,
            flGainLF: 0.3162,
            flDecayTime: 0.5600,
            flDecayHFRatio: 0.4600,
            flDecayLFRatio: 0.9100,
            flReflectionsGain: 1.1220,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0280,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_COURTYARD"]
    pub fn wooden_courtyard() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.6500,
            flGain: 0.3162,
            flGainHF: 0.0794,
            flGainLF: 0.3162,
            flDecayTime: 1.7900,
            flDecayHFRatio: 0.3500,
            flDecayLFRatio: 0.7900,
            flReflectionsGain: 0.5623,
            flReflectionsDelay: 0.1230,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.1000,
            flLateReverbDelay: 0.0320,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_WOODEN_ALCOVE"]
    pub fn wooden_alcove() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1259,
            flGainLF: 0.3162,
            flDecayTime: 1.2200,
            flDecayHFRatio: 0.6200,
            flDecayLFRatio: 0.9100,
            flReflectionsGain: 1.1220,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7079,
            flLateReverbDelay: 0.0240,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4705.0000,
            flLFReference: 99.6000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPORT_EMPTYSTADIUM"]
    pub fn sport_emptystadium() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.4467,
            flGainLF: 0.7943,
            flDecayTime: 6.2600,
            flDecayHFRatio: 0.5100,
            flDecayLFRatio: 1.1000,
            flReflectionsGain: 0.0631,
            flReflectionsDelay: 0.1830,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.3981,
            flLateReverbDelay: 0.0380,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPORT_SQUASHCOURT"]
    pub fn sport_squashcourt() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7500,
            flGain: 0.3162,
            flGainHF: 0.3162,
            flGainLF: 0.7943,
            flDecayTime: 2.2200,
            flDecayHFRatio: 0.9100,
            flDecayLFRatio: 1.1600,
            flReflectionsGain: 0.4467,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7943,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1260,
            flEchoDepth: 0.1900,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 7176.8999,
            flLFReference: 211.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPORT_SMALLSWIMMINGPOOL"]
    pub fn sport_smallswimmingpool() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7000,
            flGain: 0.3162,
            flGainHF: 0.7943,
            flGainLF: 0.8913,
            flDecayTime: 2.7600,
            flDecayHFRatio: 1.2500,
            flDecayLFRatio: 1.1400,
            flReflectionsGain: 0.6310,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7943,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1790,
            flEchoDepth: 0.1500,
            flModulationTime: 0.8950,
            flModulationDepth: 0.1900,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPORT_LARGESWIMMINGPOOL"]
    pub fn sport_largeswimmingpool() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.7943,
            flGainLF: 1.0000,
            flDecayTime: 5.4900,
            flDecayHFRatio: 1.3100,
            flDecayLFRatio: 1.1400,
            flReflectionsGain: 0.4467,
            flReflectionsDelay: 0.0390,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.5012,
            flLateReverbDelay: 0.0490,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2220,
            flEchoDepth: 0.5500,
            flModulationTime: 1.1590,
            flModulationDepth: 0.2100,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPORT_GYMNASIUM"]
    pub fn sport_gymnasium() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8100,
            flGain: 0.3162,
            flGainHF: 0.4467,
            flGainLF: 0.8913,
            flDecayTime: 3.1400,
            flDecayHFRatio: 1.0600,
            flDecayLFRatio: 1.3500,
            flReflectionsGain: 0.3981,
            flReflectionsDelay: 0.0290,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.5623,
            flLateReverbDelay: 0.0450,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1460,
            flEchoDepth: 0.1400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 7176.8999,
            flLFReference: 211.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPORT_FULLSTADIUM"]
    pub fn sport_fullstadium() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0708,
            flGainLF: 0.7943,
            flDecayTime: 5.2500,
            flDecayHFRatio: 0.1700,
            flDecayLFRatio: 0.8000,
            flReflectionsGain: 0.1000,
            flReflectionsDelay: 0.1880,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.2818,
            flLateReverbDelay: 0.0380,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SPORT_STADIUMTANNOY"]
    pub fn sport_stadiumtannoy() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7800,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.5012,
            flDecayTime: 2.5300,
            flDecayHFRatio: 0.8800,
            flDecayLFRatio: 0.6800,
            flReflectionsGain: 0.2818,
            flReflectionsDelay: 0.2300,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.5012,
            flLateReverbDelay: 0.0630,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.2000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PREFAB_WORKSHOP"]
    pub fn prefab_workshop() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1413,
            flGainLF: 0.3981,
            flDecayTime: 0.7600,
            flDecayHFRatio: 1.0000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0120,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PREFAB_SCHOOLROOM"]
    pub fn prefab_schoolroom() -> Self {
        Self {
            flDensity: 0.4022,
            flDiffusion: 0.6900,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 0.5012,
            flDecayTime: 0.9800,
            flDecayHFRatio: 0.4500,
            flDecayLFRatio: 0.1800,
            flReflectionsGain: 1.4125,
            flReflectionsDelay: 0.0170,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0150,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.0950,
            flEchoDepth: 0.1400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 7176.8999,
            flLFReference: 211.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PREFAB_PRACTISEROOM"]
    pub fn prefab_practiseroom() -> Self {
        Self {
            flDensity: 0.4022,
            flDiffusion: 0.8700,
            flGain: 0.3162,
            flGainHF: 0.3981,
            flGainLF: 0.5012,
            flDecayTime: 1.1200,
            flDecayHFRatio: 0.5600,
            flDecayLFRatio: 0.1800,
            flReflectionsGain: 1.2589,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0110,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.0950,
            flEchoDepth: 0.1400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 7176.8999,
            flLFReference: 211.2000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PREFAB_OUTHOUSE"]
    pub fn prefab_outhouse() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.1122,
            flGainLF: 0.1585,
            flDecayTime: 1.3800,
            flDecayHFRatio: 0.3800,
            flDecayLFRatio: 0.3500,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0240,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.6310,
            flLateReverbDelay: 0.0440,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1210,
            flEchoDepth: 0.1700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 107.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PREFAB_CARAVAN"]
    pub fn prefab_caravan() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.0891,
            flGainLF: 0.1259,
            flDecayTime: 0.4300,
            flDecayHFRatio: 1.5000,
            flDecayLFRatio: 1.0000,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0120,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.9953,
            flLateReverbDelay: 0.0120,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DOME_TOMB"]
    pub fn dome_tomb() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7900,
            flGain: 0.3162,
            flGainHF: 0.3548,
            flGainLF: 0.2239,
            flDecayTime: 4.1800,
            flDecayHFRatio: 0.2100,
            flDecayLFRatio: 0.1000,
            flReflectionsGain: 0.3868,
            flReflectionsDelay: 0.0300,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.6788,
            flLateReverbDelay: 0.0220,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1770,
            flEchoDepth: 0.1900,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 20.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PIPE_SMALL"]
    pub fn pipe_small() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.3548,
            flGainLF: 0.2239,
            flDecayTime: 5.0400,
            flDecayHFRatio: 0.1000,
            flDecayLFRatio: 0.1000,
            flReflectionsGain: 0.5012,
            flReflectionsDelay: 0.0320,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 2.5119,
            flLateReverbDelay: 0.0150,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 20.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DOME_SAINTPAULS"]
    pub fn dome_saintpauls() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8700,
            flGain: 0.3162,
            flGainHF: 0.3548,
            flGainLF: 0.2239,
            flDecayTime: 10.4800,
            flDecayHFRatio: 0.1900,
            flDecayLFRatio: 0.1000,
            flReflectionsGain: 0.1778,
            flReflectionsDelay: 0.0900,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0420,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.1200,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 20.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PIPE_LONGTHIN"]
    pub fn pipe_longthin() -> Self {
        Self {
            flDensity: 0.2560,
            flDiffusion: 0.9100,
            flGain: 0.3162,
            flGainHF: 0.4467,
            flGainLF: 0.2818,
            flDecayTime: 9.2100,
            flDecayHFRatio: 0.1800,
            flDecayLFRatio: 0.1000,
            flReflectionsGain: 0.7079,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7079,
            flLateReverbDelay: 0.0220,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 20.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PIPE_LARGE"]
    pub fn pipe_large() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.3548,
            flGainLF: 0.2239,
            flDecayTime: 8.4500,
            flDecayHFRatio: 0.1000,
            flDecayLFRatio: 0.1000,
            flReflectionsGain: 0.3981,
            flReflectionsDelay: 0.0460,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.5849,
            flLateReverbDelay: 0.0320,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 20.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_PIPE_RESONANT"]
    pub fn pipe_resonant() -> Self {
        Self {
            flDensity: 0.1373,
            flDiffusion: 0.9100,
            flGain: 0.3162,
            flGainHF: 0.4467,
            flGainLF: 0.2818,
            flDecayTime: 6.8100,
            flDecayHFRatio: 0.1800,
            flDecayLFRatio: 0.1000,
            flReflectionsGain: 0.7079,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.0000,
            flLateReverbDelay: 0.0220,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 20.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_OUTDOORS_BACKYARD"]
    pub fn outdoors_backyard() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.4500,
            flGain: 0.3162,
            flGainHF: 0.2512,
            flGainLF: 0.5012,
            flDecayTime: 1.1200,
            flDecayHFRatio: 0.3400,
            flDecayLFRatio: 0.4600,
            flReflectionsGain: 0.4467,
            flReflectionsDelay: 0.0690,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.7079,
            flLateReverbDelay: 0.0230,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2180,
            flEchoDepth: 0.3400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4399.1001,
            flLFReference: 242.9000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_OUTDOORS_ROLLINGPLAINS"]
    pub fn outdoors_rollingplains() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.0000,
            flGain: 0.3162,
            flGainHF: 0.0112,
            flGainLF: 0.6310,
            flDecayTime: 2.1300,
            flDecayHFRatio: 0.2100,
            flDecayLFRatio: 0.4600,
            flReflectionsGain: 0.1778,
            flReflectionsDelay: 0.3000,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.4467,
            flLateReverbDelay: 0.0190,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 1.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4399.1001,
            flLFReference: 242.9000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_OUTDOORS_DEEPCANYON"]
    pub fn outdoors_deepcanyon() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7400,
            flGain: 0.3162,
            flGainHF: 0.1778,
            flGainLF: 0.6310,
            flDecayTime: 3.8900,
            flDecayHFRatio: 0.2100,
            flDecayLFRatio: 0.4600,
            flReflectionsGain: 0.3162,
            flReflectionsDelay: 0.2230,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.3548,
            flLateReverbDelay: 0.0190,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 1.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4399.1001,
            flLFReference: 242.9000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_OUTDOORS_CREEK"]
    pub fn outdoors_creek() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.3500,
            flGain: 0.3162,
            flGainHF: 0.1778,
            flGainLF: 0.5012,
            flDecayTime: 2.1300,
            flDecayHFRatio: 0.2100,
            flDecayLFRatio: 0.4600,
            flReflectionsGain: 0.3981,
            flReflectionsDelay: 0.1150,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.1995,
            flLateReverbDelay: 0.0310,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2180,
            flEchoDepth: 0.3400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 4399.1001,
            flLFReference: 242.9000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_OUTDOORS_VALLEY"]
    pub fn outdoors_valley() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.2800,
            flGain: 0.3162,
            flGainHF: 0.0282,
            flGainLF: 0.1585,
            flDecayTime: 2.8800,
            flDecayHFRatio: 0.2600,
            flDecayLFRatio: 0.3500,
            flReflectionsGain: 0.1413,
            flReflectionsDelay: 0.2630,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.3981,
            flLateReverbDelay: 0.1000,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.3400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 107.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_MOOD_HEAVEN"]
    pub fn mood_heaven() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.9400,
            flGain: 0.3162,
            flGainHF: 0.7943,
            flGainLF: 0.4467,
            flDecayTime: 5.0400,
            flDecayHFRatio: 1.1200,
            flDecayLFRatio: 0.5600,
            flReflectionsGain: 0.2427,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0290,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0800,
            flModulationTime: 2.7420,
            flModulationDepth: 0.0500,
            flAirAbsorptionGainHF: 0.9977,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_MOOD_HELL"]
    pub fn mood_hell() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.5700,
            flGain: 0.3162,
            flGainHF: 0.3548,
            flGainLF: 0.4467,
            flDecayTime: 3.5700,
            flDecayHFRatio: 0.4900,
            flDecayLFRatio: 2.0000,
            flReflectionsGain: 0.0000,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1100,
            flEchoDepth: 0.0400,
            flModulationTime: 2.1090,
            flModulationDepth: 0.5200,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 139.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_MOOD_MEMORY"]
    pub fn mood_memory() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8500,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 0.3548,
            flDecayTime: 4.0600,
            flDecayHFRatio: 0.8200,
            flDecayLFRatio: 0.5600,
            flReflectionsGain: 0.0398,
            flReflectionsDelay: 0.0000,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.1220,
            flLateReverbDelay: 0.0000,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.4740,
            flModulationDepth: 0.4500,
            flAirAbsorptionGainHF: 0.9886,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_COMMENTATOR"]
    pub fn driving_commentator() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.0000,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 0.5012,
            flDecayTime: 2.4200,
            flDecayHFRatio: 0.8800,
            flDecayLFRatio: 0.6800,
            flReflectionsGain: 0.1995,
            flReflectionsDelay: 0.0930,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.2512,
            flLateReverbDelay: 0.0170,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 1.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9886,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_PITGARAGE"]
    pub fn driving_pitgarage() -> Self {
        Self {
            flDensity: 0.4287,
            flDiffusion: 0.5900,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 0.5623,
            flDecayTime: 1.7200,
            flDecayHFRatio: 0.9300,
            flDecayLFRatio: 0.8700,
            flReflectionsGain: 0.5623,
            flReflectionsDelay: 0.0000,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0160,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.1100,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_INCAR_RACER"]
    pub fn driving_incar_racer() -> Self {
        Self {
            flDensity: 0.0832,
            flDiffusion: 0.8000,
            flGain: 0.3162,
            flGainHF: 1.0000,
            flGainLF: 0.7943,
            flDecayTime: 0.1700,
            flDecayHFRatio: 2.0000,
            flDecayLFRatio: 0.4100,
            flReflectionsGain: 1.7783,
            flReflectionsDelay: 0.0070,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7079,
            flLateReverbDelay: 0.0150,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 10268.2002,
            flLFReference: 251.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_INCAR_SPORTS"]
    pub fn driving_incar_sports() -> Self {
        Self {
            flDensity: 0.0832,
            flDiffusion: 0.8000,
            flGain: 0.3162,
            flGainHF: 0.6310,
            flGainLF: 1.0000,
            flDecayTime: 0.1700,
            flDecayHFRatio: 0.7500,
            flDecayLFRatio: 0.4100,
            flReflectionsGain: 1.0000,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.5623,
            flLateReverbDelay: 0.0000,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 10268.2002,
            flLFReference: 251.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_INCAR_LUXURY"]
    pub fn driving_incar_luxury() -> Self {
        Self {
            flDensity: 0.2560,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.1000,
            flGainLF: 0.5012,
            flDecayTime: 0.1300,
            flDecayHFRatio: 0.4100,
            flDecayLFRatio: 0.4600,
            flReflectionsGain: 0.7943,
            flReflectionsDelay: 0.0100,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.5849,
            flLateReverbDelay: 0.0100,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 10268.2002,
            flLFReference: 251.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_FULLGRANDSTAND"]
    pub fn driving_fullgrandstand() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 0.2818,
            flGainLF: 0.6310,
            flDecayTime: 3.0100,
            flDecayHFRatio: 1.3700,
            flDecayLFRatio: 1.2800,
            flReflectionsGain: 0.3548,
            flReflectionsDelay: 0.0900,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.1778,
            flLateReverbDelay: 0.0490,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 10420.2002,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_EMPTYGRANDSTAND"]
    pub fn driving_emptygrandstand() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 1.0000,
            flGain: 0.3162,
            flGainHF: 1.0000,
            flGainLF: 0.7943,
            flDecayTime: 4.6200,
            flDecayHFRatio: 1.7500,
            flDecayLFRatio: 1.4000,
            flReflectionsGain: 0.2082,
            flReflectionsDelay: 0.0900,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.2512,
            flLateReverbDelay: 0.0490,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 10420.2002,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DRIVING_TUNNEL"]
    pub fn driving_tunnel() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8100,
            flGain: 0.3162,
            flGainHF: 0.3981,
            flGainLF: 0.8913,
            flDecayTime: 3.4200,
            flDecayHFRatio: 0.9400,
            flDecayLFRatio: 1.3100,
            flReflectionsGain: 0.7079,
            flReflectionsDelay: 0.0510,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7079,
            flLateReverbDelay: 0.0470,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2140,
            flEchoDepth: 0.0500,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 155.3000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CITY_STREETS"]
    pub fn city_streets() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7800,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 0.8913,
            flDecayTime: 1.7900,
            flDecayHFRatio: 1.1200,
            flDecayLFRatio: 0.9100,
            flReflectionsGain: 0.2818,
            flReflectionsDelay: 0.0460,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.1995,
            flLateReverbDelay: 0.0280,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.2000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CITY_SUBWAY"]
    pub fn city_subway() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7400,
            flGain: 0.3162,
            flGainHF: 0.7079,
            flGainLF: 0.8913,
            flDecayTime: 3.0100,
            flDecayHFRatio: 1.2300,
            flDecayLFRatio: 0.9100,
            flReflectionsGain: 0.7079,
            flReflectionsDelay: 0.0460,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0280,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1250,
            flEchoDepth: 0.2100,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CITY_MUSEUM"]
    pub fn city_museum() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.1778,
            flGainLF: 0.1778,
            flDecayTime: 3.2800,
            flDecayHFRatio: 1.4000,
            flDecayLFRatio: 0.5700,
            flReflectionsGain: 0.2512,
            flReflectionsDelay: 0.0390,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0340,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1300,
            flEchoDepth: 0.1700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 107.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CITY_LIBRARY"]
    pub fn city_library() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.2818,
            flGainLF: 0.0891,
            flDecayTime: 2.7600,
            flDecayHFRatio: 0.8900,
            flDecayLFRatio: 0.4100,
            flReflectionsGain: 0.3548,
            flReflectionsDelay: 0.0290,
            flReflectionsPan: [0.0000, 0.0000, -0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0200,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1300,
            flEchoDepth: 0.1700,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 2854.3999,
            flLFReference: 107.5000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CITY_UNDERPASS"]
    pub fn city_underpass() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8200,
            flGain: 0.3162,
            flGainHF: 0.4467,
            flGainLF: 0.8913,
            flDecayTime: 3.5700,
            flDecayHFRatio: 1.1200,
            flDecayLFRatio: 0.9100,
            flReflectionsGain: 0.3981,
            flReflectionsDelay: 0.0590,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.8913,
            flLateReverbDelay: 0.0370,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.1400,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9920,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CITY_ABANDONED"]
    pub fn city_abandoned() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.6900,
            flGain: 0.3162,
            flGainHF: 0.7943,
            flGainLF: 0.8913,
            flDecayTime: 3.2800,
            flDecayHFRatio: 1.1700,
            flDecayLFRatio: 0.9100,
            flReflectionsGain: 0.4467,
            flReflectionsDelay: 0.0440,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.2818,
            flLateReverbDelay: 0.0240,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.2000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9966,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_DUSTYROOM"]
    pub fn dustyroom() -> Self {
        Self {
            flDensity: 0.3645,
            flDiffusion: 0.5600,
            flGain: 0.3162,
            flGainHF: 0.7943,
            flGainLF: 0.7079,
            flDecayTime: 1.7900,
            flDecayHFRatio: 0.3800,
            flDecayLFRatio: 0.2100,
            flReflectionsGain: 0.5012,
            flReflectionsDelay: 0.0020,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.2589,
            flLateReverbDelay: 0.0060,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2020,
            flEchoDepth: 0.0500,
            flModulationTime: 0.2500,
            flModulationDepth: 0.0000,
            flAirAbsorptionGainHF: 0.9886,
            flHFReference: 13046.0000,
            flLFReference: 163.3000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_CHAPEL"]
    pub fn chapel() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.8400,
            flGain: 0.3162,
            flGainHF: 0.5623,
            flGainLF: 1.0000,
            flDecayTime: 4.6200,
            flDecayHFRatio: 0.6400,
            flDecayLFRatio: 1.2300,
            flReflectionsGain: 0.4467,
            flReflectionsDelay: 0.0320,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 0.7943,
            flLateReverbDelay: 0.0490,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.2500,
            flEchoDepth: 0.0000,
            flModulationTime: 0.2500,
            flModulationDepth: 0.1100,
            flAirAbsorptionGainHF: 0.9943,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x1,
        }
    }

    #[doc = "EFX_REVERB_PRESET_SMALLWATERROOM"]
    pub fn smallwaterroom() -> Self {
        Self {
            flDensity: 1.0000,
            flDiffusion: 0.7000,
            flGain: 0.3162,
            flGainHF: 0.4477,
            flGainLF: 1.0000,
            flDecayTime: 1.5100,
            flDecayHFRatio: 1.2500,
            flDecayLFRatio: 1.1400,
            flReflectionsGain: 0.8913,
            flReflectionsDelay: 0.0200,
            flReflectionsPan: [0.0000, 0.0000, 0.0000],
            flLateReverbGain: 1.4125,
            flLateReverbDelay: 0.0300,
            flLateReverbPan: [0.0000, 0.0000, 0.0000],
            flEchoTime: 0.1790,
            flEchoDepth: 0.1500,
            flModulationTime: 0.8950,
            flModulationDepth: 0.1900,
            flAirAbsorptionGainHF: 0.9920,
            flHFReference: 5000.0000,
            flLFReference: 250.0000,
            flRoomRolloffFactor: 0.0000,
            iDecayHFLimit: 0x0,
        }
    }
}
